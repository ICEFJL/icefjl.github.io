<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>服务器应用搭建</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BA%94%E7%94%A8%E6%90%AD%E5%BB%BA.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BA%94%E7%94%A8%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<h1 id="AI-酒馆"><a href="#AI-酒馆" class="headerlink" title="AI 酒馆"></a>AI 酒馆</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://sqivg8d05rm.feishu.cn/wiki/J8NDwc06JiuHXmk5cP2csfP6nmd">‌​​​‌⁠﻿‍‬​‌​⁠​​​​​​​‌⁠​‍﻿​​​​​‍﻿​‬​‍‍‬​‬​‌‌​‍‍​​​​酒馆入门（必修） - 飞书云文档</a><br><a href="https://mp.weixin.qq.com/s/d1CxMqv40GwALsUKD-hc5w">Docker篇 | SillyTavern 酒馆</a><br><a href="https://www.rainlain.com/index.php/2024/11/19/2645/">WINNAS轻松搭：SillyTavern（酒馆）从入门到精通 - 梦雨玲音</a></p><h2 id="搭建酒馆"><a href="#搭建酒馆" class="headerlink" title="搭建酒馆"></a>搭建酒馆</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt install git</span><br><span class="line">git clone https://github.com/SillyTavern/SillyTavern.git</span><br><span class="line">cd SillyTavern</span><br><span class="line">./start.sh</span><br><span class="line">vim config.yaml</span><br><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><p>用 pm2 来管理 <code>node.js</code> 项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 进入酒馆目录</span><br><span class="line">cd SillyTavern</span><br><span class="line"></span><br><span class="line">## 运行酒馆</span><br><span class="line">pm2 start server.js --name &quot;SillyTavern&quot;</span><br></pre></td></tr></table></figure><p>出现 <code>status</code> 状态为 <code>online</code> 即可</p><p>因为服务器重启后需手动重启酒馆，所以我们在这里把酒馆设为开机自启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 该部分必须在酒馆目录下进行</span><br><span class="line">## 设置开启自启</span><br><span class="line">pm2 startup</span><br><span class="line"></span><br><span class="line">## 保存配置</span><br><span class="line">pm2 save</span><br></pre></td></tr></table></figure><p>全部成功后即部署酒馆，访问 <strong><code>IP:酒馆端口</code></strong> 即可。</p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>如需查看酒馆日志，运行以下命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 logs SillyTavern</span><br></pre></td></tr></table></figure><h3 id="运行后如何修改配置"><a href="#运行后如何修改配置" class="headerlink" title="运行后如何修改配置"></a>运行后如何修改配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 reload SillyTavern</span><br></pre></td></tr></table></figure><h3 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h3><p>VPS 自带安全策略安全性极差，所以根据需求可以配置防火墙</p><h4 id="安装-ufw"><a href="#安装-ufw" class="headerlink" title="安装 ufw"></a>安装 ufw</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install ufw</span><br></pre></td></tr></table></figure><h4 id="配置策略"><a href="#配置策略" class="headerlink" title="配置策略"></a>配置策略</h4><p>必须放行 22 端口！不然会导致 SSH 无法连接</p><p>允许 22 端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 22/tcp</span><br></pre></td></tr></table></figure><p>随后添加酒馆的端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 8321/tcp</span><br></pre></td></tr></table></figure><h4 id="启动防火墙"><a href="#启动防火墙" class="headerlink" title="启动防火墙"></a>启动防火墙</h4><p>务必已经放行 22 端口后，再开启防火墙</p><p>输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw enable</span><br></pre></td></tr></table></figure><p>出现以下内容输入小写 <code>y</code> 回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command may disrupt existing ssh connections. Proceed with operation (y|n)?</span><br></pre></td></tr></table></figure><p>完成防火墙配置</p><h2 id="ai-绘图"><a href="#ai-绘图" class="headerlink" title="ai 绘图"></a>ai 绘图</h2><ul><li><a href="https://www.zcool.com.cn/work/ZNjg4Njc4NjQ=.html">用设计师语言解释AI绘画底层原理 一（入门comfyui）_体验与思考-站酷ZCOOL</a></li><li><a href="https://fcnk27d6mpa5.feishu.cn/wiki/S8Z4wy7fSiePNRksiBXcyrUenOh">NOOBAI XL快速指南 - 飞书云文档</a></li><li><a href="https://docs.google.com/spreadsheets/d/1eGBy8WKavBtG2SKz8p8coP4k-kMilweR70zCMj-QGbM/edit?pli=1&gid=1674089997#gid=1674089997">AI绘图查表 - Google 表格</a></li></ul><h1 id="聊天机器人"><a href="#聊天机器人" class="headerlink" title="聊天机器人"></a>聊天机器人</h1><h2 id="鸣潮机器人"><a href="#鸣潮机器人" class="headerlink" title="鸣潮机器人"></a>鸣潮机器人</h2><ul><li><a href="https://blog.csdn.net/weixin_58403216/article/details/144715878">NoneBot2搭建官方QQ机器人-简单易上手-CSDN博客</a></li><li><a href="https://wiki.wavesuid.top/docs/intro">装前必知 | Carlotta</a></li><li><a href="https://gitee.com/shen-le/WutheringWavesUID">神乐&#x2F;WutheringWavesUID</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何治疗抑郁</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/%E5%A6%82%E4%BD%95%E6%B2%BB%E7%96%97%E6%8A%91%E9%83%81.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/%E5%A6%82%E4%BD%95%E6%B2%BB%E7%96%97%E6%8A%91%E9%83%81.html</url>
      
        <content type="html"><![CDATA[<p>我觉得人之所以抑郁是因为总想把什么都想透，但并不是任何问题都有答案，都能想透的。有时候糊涂一点，对于人来说是比较好的，有的东西在你脑子里过去了就过去了，不要去细究，容易耗费脑力。<br>此外，人有时候需要按照自己的欲望来，不能总是压抑自己，那样会使得你自己失去动力，丧失对生活的兴趣。这方面是有生理学研究的，可以研究相关脑科学和心理学，来从生理和心理治疗自己。<br>此外，保证自己的健康运动、饮食和睡眠。<br>此外，别人说的躺平只是一种通用解，具体怎么治疗自己，害得靠你自己去探索。就像感冒了多喝热水一样，最终还是靠你自己的免疫力去治疗。</p>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p><a href="https://12520.net/archives/debian-mihomo-clash.mate-webui">Linux 搭建 Clash WebUI（无桌面环境）|枯死的灌木</a></p><h2 id="VRAY-代理"><a href="#VRAY-代理" class="headerlink" title="VRAY 代理"></a>VRAY 代理</h2><ul><li><a href="https://v2raya.org/docs/prologue/installation/debian/#%E5%AE%89%E8%A3%85-v2raya">v2raya安装</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/apt/keyrings</span><br><span class="line"><span class="built_in">touch</span> /etc/apt/keyrings/v2raya.asc</span><br><span class="line">wget -qO - https://apt.v2raya.org/key/public-key.asc | <span class="built_in">tee</span> /etc/apt/keyrings/v2raya.asc</span><br><span class="line"><span class="built_in">touch</span> /etc/apt/sources.list.d/v2raya.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/v2raya.list</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y v2raya v2ray</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start v2raya.service</span><br><span class="line">sudo systemctl enable v2raya.service</span><br></pre></td></tr></table></figure><p>推荐用 tuic 代理<br>假设你已经启用了 <code>ufw</code>，并且想要开放 2017 端口，可以使用以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 2017/tcp</span><br></pre></td></tr></table></figure><p>然后验证规则是否已添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status verbose</span><br></pre></td></tr></table></figure><h2 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h2><p>建议采用不进行分流，gvisor tun 模式</p><p>.bashrc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://localhost:20171</span><br><span class="line">export https_proxy=http://localhost:20171</span><br></pre></td></tr></table></figure><p>docker 也需要代理</p><h2 id="脚本代理"><a href="#脚本代理" class="headerlink" title="脚本代理"></a>脚本代理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget -qO- https://raw.githubusercontent.com/yonggekkk/sing-box-yg/main/sb.sh)</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/yonggekkk/sing-box_hysteria2_tuic_argo_reality?tab=readme-ov-file">GitHub - yonggekkk&#x2F;sing-box_hysteria2_tuic_argo_reality: sing-box精装桶一键脚本【Hysteria2、Tuic5、Vless-reality、Vmess-ws&#x2F;argo】：支持alpine系统，多端口跳跃、自签&#x2F;acme双证书切换、Argo固定临时双隧道三模式；附singbox电脑网页客户端下载</a></li></ul><h1 id="1panel"><a href="#1panel" class="headerlink" title="1panel"></a>1panel</h1><ul><li><a href="https://1panel.cn/docs/installation/online_installation/">https://1panel.cn/docs/installation/online_installation/</a></li><li><a href="https://bbs.fit2cloud.com/t/topic/6697">IPV6主机识别地区不太准 - 1Panel - 社区论坛 - FIT2CLOUD 飞致云</a></li></ul><h1 id="vps-网速加速"><a href="#vps-网速加速" class="headerlink" title="vps 网速加速"></a>vps 网速加速</h1><ul><li><a href="https://www.taurusxin.com/linux-network-optimize/">大幅度优化你的 VPS 网速 (taurusxin.com)</a></li></ul><h1 id="免费节点"><a href="#免费节点" class="headerlink" title="免费节点"></a>免费节点</h1><ul><li><a href="https://singboxgithub.github.io/free-nodes/">https://singboxgithub.github.io/free-nodes/</a></li></ul><h1 id="docker-代理"><a href="#docker-代理" class="headerlink" title="docker 代理"></a>docker 代理</h1><ul><li><a href="https://github.com/gebangfeng/docker-mirror/blob/main/dockerproxy">docker-mirror&#x2F;dockerproxy&#x2F;README.md at main · gebangfeng&#x2F;docker-mirror</a></li></ul><h1 id="api"><a href="#api" class="headerlink" title="api"></a>api</h1><ul><li><a href="https://linux.do/t/topic/164076">在Serv00上搭建One-API、接入数据库并保活 - 资源荟萃 - LINUX DO</a></li><li><a href="https://linux.do/t/topic/229833">在cloudflare部署hugging face的免费api，可对接oneapi&#x2F;newapi，免费使用Qwen2.5 72B等模型 - 资源荟萃 - LINUX DO</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nix包管理器</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/nix%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/nix%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装-Nix"><a href="#安装-Nix" class="headerlink" title="安装 Nix"></a>安装 Nix</h1><p><a href="https://www.cnblogs.com/searchstar/p/18437293">使用国内源安装和使用Nix包管理器 - 寻找繁星 - 博客园</a></p><h1 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h1><h2 id="搜索并安装包"><a href="#搜索并安装包" class="headerlink" title="搜索并安装包"></a>搜索并安装包</h2><p>安装 Nix 包管理器后，下一步是搜索包。</p><p>首先，<a href="https://search.nixos.org/packages">访问 Nix 搜索的官方页面</a> 并输入你要安装的软件包的名称。</p><p>从给定的描述中，你可以找到所需的软件包，然后选择 <code>nix-env</code> 进行永久安装。</p><p>就我而言，它给了我以下命令来安装 Firefox：</p><p> <code>nix-env -iA nixpkgs.firefox</code></p><p>完成后，你可以使用以下命令列出已安装的软件包：</p><p> <code>nix-env -q</code></p><h3 id="安装旧版包"><a href="#安装旧版包" class="headerlink" title="安装旧版包"></a>安装旧版包</h3><p>在 nix 中，官方的 Channel 是 <a href="https://github.com/NixOS/nixpkgs">nixpkgs</a>，这个 Channel 是通过 git 管理的。</p><p>通过 <code>nix-env -qaP go</code> 可以看到，目前最新版本提交的 nixpkgs 的 Go 只有最新的三个版本 1.18、1.19 和 1.20。</p><p>上文对于 Go 的安装，使用的是最新 commit 的 nixpkgs （通过 nix-channel 配置）。</p><p>而 <code>nix-env</code> 还提供了基于某个特殊版本的 nixpkgs 的安装机制。如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nix-env -iA go -f https://github.com/NixOS/nixpkgs/archive/d1c3fea7ecbed758168787fe4e4a3157e52bc808.tar.gz</span><br></pre></td></tr></table></figure><p>很多时候，我们希望，安装更旧版本的依赖时，就需要获取到包含更旧 Go 的配置的 nixpkgs 那个 commit 的快照。</p><p>因此，现在的问题是，如何通过包名查询历史版本对应的 commit，然后通过上文的类似于 <code>https://github.com/NixOS/nixpkgs/archive/$commitID.tar.gz</code> 的方式即可安装旧版本的包。</p><p>nixpkgs 官方并未提供该能力，但是幸运的是 nix 社区有一个站点可以查询这些信息： <a href="https://lazamar.co.uk/nix-versions/">https://lazamar.co.uk/nix-versions/</a> 。</p><p>其原理可以参见：<a href="https://lazamar.github.io/download-specific-package-version-with-nix/">该站点作者博客</a>。</p><p>此外，该项目已开源，参见： <a href="https://github.com/lazamar/nix-package-versions">lazamar&#x2F;nix-package-versions</a>。</p><p>nixpkgs 官方关于安装旧版包的讨论参见：<a href="https://github.com/NixOS/nixpkgs/issues/9682">No way to install&#x2F;use a specific package version? #9682</a>。</p><p>注意：</p><ul><li>中国大陆地区，建议先通过科学上网，clone 下整个 <a href="https://github.com/NixOS/nixpkgs">https://github.com/NixOS/nixpkgs</a> 仓库（几个 G 大小），然后 checkout 到指定版本，然后在通过 <code>nix-env -f</code> 指定到 nixpkgs 根目录目录。</li><li>从多个历史 commit 的 nixpkgs 安装包会导致磁盘占用快速上升。</li></ul><h2 id="使用包而不安装它们"><a href="#使用包而不安装它们" class="headerlink" title="使用包而不安装它们"></a>使用包而不安装它们</h2><p>到目前为止，这是 Nix 包管理器的最佳功能，因为你可以使用&#x2F;测试包甚至不用安装它！</p><p>为此，你可以使用 Nix Shell，它允许你将交互式 Shell 与指定的包一起使用，关闭后，你将无法再访问该包。</p><p>要使用 nix-shell 访问你喜欢的软件包，请使用以下命令语法：</p><p><code>nix-shell -p &lt;package_name&gt;</code></p><p>例如，我想使用一次 <code>neofetch</code>，所以我使用了以下命令：</p><p><code>nix-shell -p neofetch</code></p><p><img src="/../../img/blog/1bb0cda327dc537bcd941f3cb0c62447_MD5.png"></p><p>要退出 Shell，你所要做的就是执行 <code>exit</code> 命令：</p><h2 id="使用-Nix-包管理器更新包"><a href="#使用-Nix-包管理器更新包" class="headerlink" title="使用 Nix 包管理器更新包"></a>使用 Nix 包管理器更新包</h2><p>使用 Nix 包管理器更新包非常简单。</p><p>要更新软件包，首先，你需要使用以下命令更新频道：</p><p> <code>nix-channel --update</code></p><p>接下来，你可以通过试运行更新命令来列出过时的软件包：</p><p> <code>nix-env --upgrade --dry-run</code></p><p>要更新单个包，请使用以下命令：</p><p> <code>nix-env -u &lt;Package_name&gt;</code></p><p>如果你想一次更新所有软件包，请使用以下命令：</p><p> <code>nix-env -u</code></p><h2 id="使用-Nix-包管理器删除包"><a href="#使用-Nix-包管理器删除包" class="headerlink" title="使用 Nix 包管理器删除包"></a>使用 Nix 包管理器删除包</h2><p>要删除软件包，你只需按以下方式执行 <code>nix-env</code> 命令即可：</p><p> <code>nix-env --uninstall [package_name]</code></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.rectcircle.cn/posts/nix-1-package-manager/">Nix 详解（一） 像传统包管理器一样使用 Nix :: Rectcircle Blog</a></li><li><a href="https://www.rectcircle.cn/posts/nix-2-project-external-dependencies-manager/">Nix 详解（二） 项目外部依赖管理 :: Rectcircle Blog</a></li><li><a href="https://www.rectcircle.cn/posts/nix-3-nix-dsl/">Nix 详解（三） nix 领域特定语言 :: Rectcircle Blog</a></li><li><a href="https://www.rectcircle.cn/posts/nix-4-http-binary-cache/">Nix 详解（四） HTTP 二进制缓存详解 :: Rectcircle Blog</a></li><li><a href="https://www.rectcircle.cn/posts/nix-5-how-to-use-in-rd-group/">Nix 详解（五）在研发团队中落地设计 :: Rectcircle Blog</a></li><li><a href="https://www.rectcircle.cn/posts/nix-6-cheat-sheet/">Nix 详解（六） 备忘单 :: Rectcircle Blog</a></li></ul><h1 id="devbox"><a href="#devbox" class="headerlink" title="devbox"></a>devbox</h1><ul><li><a href="https://github.com/jetify-com/devbox">https://github.com/jetify-com/devbox</a></li><li><a href="https://www.nixhub.io/">https://www.nixhub.io/</a></li><li><a href="https://www.soulchild.cn/post/720694636/">探索 DevBox 高效开发的创新利器 - SoulChild随笔记</a></li></ul><h1 id="通过-NixOS-释放其全部潜力"><a href="#通过-NixOS-释放其全部潜力" class="headerlink" title="通过 NixOS 释放其全部潜力"></a>通过 NixOS 释放其全部潜力</h1><p>如果你喜欢 Nix 包管理器背后的想法，请相信我，你一定会喜欢 <a href="https://nixos.org/">NixOS</a>。</p><p>仅使用一个配置文件来复制整个系统就足以说服我切换到 NixOS，但还有更多原因：</p><p>我喜欢 NixOS。以至于我写了整个系列，这样你就不必阅读文档（基础知识）：</p><blockquote><p><strong><a href="https://linux.cn/article-15606-1.html">NixOS 系列</a></strong><br><strong><a href="https://www.rectcircle.cn/posts/nixos/">NixOS 指南 :: Rectcircle Blog</a></strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端编辑器配置</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/%E7%BB%88%E7%AB%AF%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/%E7%BB%88%E7%AB%AF%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="helix"><a href="#helix" class="headerlink" title="helix"></a>helix</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://docs.helix-editor.com/configuration.html">Configuration (helix-editor.com)</a></li><li><a href="https://zjp-cn.github.io/helix-book/title-page.html">Helix - Helix Book 中文翻译 (较旧)</a></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><ul><li><a href="https://github.com/helix-editor/helix/discussions/6209">Using PowerShell core as shell</a></li><li><a href="https://github.com/helix-editor/helix/discussions/7455">shell编码问题</a></li><li><a href="https://github.com/helix-editor/helix/discussions/8776">使用nushell</a></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>即使 Helix 在零配置下也可以使用，如果想要更加符合自己的习惯还是需要一些配置。 <a href="https://link.zhihu.com/?target=https://github.com/erasin/helix-config">erasin&#x2F;helix-config</a> 是我自己正在使用的配置文件。</p><p>在 Helix 中,加载配置的顺序是 <code>默认配置</code> –&gt;&gt; <code>.config/helix/</code> 中自定义配置 –&gt; <code>self-project/.helix/</code> 项目文件夹下自定义配置。在三层配置这种常规设计基本上可以满足各种使用的情况了。</p><p>配置文件结构主要有：</p><ul><li>config.toml &lt;– 编辑器配置</li><li>language.toml &lt;– 语言支持配置</li><li>themes&#x2F; &lt;– 自定义主题<ul><li>self-theme1.toml</li></ul></li><li>icons&#x2F; &lt;– 自定义图标<ul><li>self-icons.toml</li></ul></li></ul><h3 id="config-toml"><a href="#config-toml" class="headerlink" title="config.toml"></a>config.toml</h3><p>配置主要提供 true-color 支持,自定义显示,以及自定义键盘布局。在编辑器器中使用 <code>:set-option</code> 可以看到配置选项,或者阅读官方文档配置。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme</span> = <span class="string">&quot;zed_onedark&quot;</span></span><br><span class="line"><span class="comment"># icons = &quot;nerd&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># editor 编辑器</span></span><br><span class="line"><span class="section">[editor]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 真彩支持</span></span><br><span class="line"><span class="attr">true-color</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 光标样式</span></span><br><span class="line"><span class="section">[editor.cursor-shape]</span></span><br><span class="line"><span class="attr">insert</span> = <span class="string">&quot;bar&quot;</span></span><br><span class="line"><span class="attr">normal</span> = <span class="string">&quot;block&quot;</span></span><br><span class="line"><span class="attr">select</span> = <span class="string">&quot;underline&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态栏定义</span></span><br><span class="line"><span class="section">[editor.statusline]</span></span><br><span class="line"><span class="comment"># [#2869] file-type-icon</span></span><br><span class="line"><span class="attr">left</span> = [<span class="string">&quot;mode&quot;</span>, <span class="string">&quot;spacer&quot;</span>, <span class="string">&quot;spinner&quot;</span>, <span class="string">&quot;spacer&quot;</span>,  <span class="string">&quot;file-name&quot;</span>, <span class="string">&quot;file-modification-indicator&quot;</span>]</span><br><span class="line"><span class="attr">center</span> = [<span class="string">&quot;diagnostics&quot;</span>,<span class="string">&quot;workspace-diagnostics&quot;</span>]</span><br><span class="line"><span class="attr">right</span> = [<span class="string">&quot;position-percentage&quot;</span>, <span class="string">&quot;file-encoding&quot;</span>,  <span class="string">&quot;file-type&quot;</span>, ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键盘布局</span></span><br><span class="line"><span class="section">[keys.normal]</span></span><br><span class="line"><span class="comment"># use `li` or remap `after insert`</span></span><br><span class="line"><span class="attr">a</span> = [<span class="string">&quot;move_char_right&quot;</span>,<span class="string">&quot;insert_mode&quot;</span>]</span><br><span class="line"><span class="attr">&quot;C-s&quot;</span> = <span class="string">&quot;:write&quot;</span>  <span class="comment"># 原保存跳转列表位置，修改为 C-j</span></span><br><span class="line"><span class="attr">&quot;C-j&quot;</span> = [<span class="string">&quot;save_selection&quot;</span>]</span><br><span class="line"><span class="attr">&quot;C-r&quot;</span> = <span class="string">&quot;:reload&quot;</span></span><br><span class="line"><span class="attr">&quot;C-z&quot;</span> = <span class="string">&quot;normal_mode&quot;</span>     <span class="comment"># replace suspend</span></span><br><span class="line"><span class="attr">&quot;C-q&quot;</span> = <span class="string">&quot;:quit&quot;</span></span><br><span class="line"><span class="attr">&quot;A-/&quot;</span> = <span class="string">&quot;toggle_comments&quot;</span></span><br><span class="line"><span class="attr">&quot;\\&quot;</span> = <span class="string">&quot;:reflow&quot;</span> <span class="comment"># |</span></span><br><span class="line"><span class="attr">&quot;X&quot;</span> = <span class="string">&quot;extend_line_above&quot;</span></span><br><span class="line"><span class="attr">&quot;Z&quot;</span> = &#123; <span class="string">&quot;Z&quot;</span> = [<span class="string">&quot;:quit&quot;</span>] &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># space mode</span></span><br><span class="line"><span class="section">[keys.normal.space]</span></span><br><span class="line"><span class="attr">&quot;x&quot;</span> = <span class="string">&quot;:buffer-close&quot;</span></span><br><span class="line"><span class="attr">&quot;w&quot;</span> = &#123; <span class="string">&quot;r&quot;</span> = <span class="string">&quot;:config-reload&quot;</span> &#125;</span><br><span class="line"><span class="attr">&quot;.&quot;</span> = <span class="string">&quot;file_picker_in_current_buffer_directory&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[keys.insert]</span></span><br><span class="line"><span class="comment"># macos 自动切换到英文环境</span></span><br><span class="line"><span class="comment"># &quot;esc&quot; = [&quot;:sh macism com.apple.keylayout.ABC&quot;, &quot;normal_mode&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [keys.select]</span></span><br></pre></td></tr></table></figure><p>Helix 提供 <a href="https://link.zhihu.com/?target=https://docs.helix-editor.com/keymap.html">keymap</a> 和 <a href="https://link.zhihu.com/?target=https://docs.helix-editor.com/commands.html">commands</a> 命令, 这些命令在自定义键盘布局中自由组合，命令组会顺序处理。比如 <code>a = [&quot;move_char_right&quot;,&quot;insert_mode&quot;]</code> Helix 中 <code>a</code> 默认为选区追加, 将其覆盖为字符向后移动一位编辑模式。详细的请参看 <a href="https://link.zhihu.com/?target=https://docs.helix-editor.com/configuration.html">配置文档</a> 。</p><h2 id="lsp"><a href="#lsp" class="headerlink" title="lsp"></a>lsp</h2><p>通过 <code>hx --health language</code> 检查 lsp<br>内置语言支持 Tree-Sitter 查看项目的 <a href="https://link.zhihu.com/?target=https://github.com/helix-editor/helix/blob/master/languages.toml">languages.toml</a> 可以看到支持的语言。<br><a href="https://github.com/helix-editor/helix/wiki/How-to-install-the-default-language-servers">How to install the default language servers · helix-editor&#x2F;helix Wiki</a><br>编写 <code>languages.toml</code>，保存在 <code>~/.config/helix/</code> 路径下。参考官网的配置就好，内容如下：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[[language]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;rust&quot;</span></span><br><span class="line"><span class="attr">auto-format</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If this doesn&#x27;t work, you might be on a older release version which handles this differently.</span></span><br><span class="line"><span class="comment"># Try using [language.config.check] instead of [language-server.rust-analyzer.config.check]</span></span><br><span class="line"><span class="section">[language-server.rust-analyzer.config.check]</span></span><br><span class="line"><span class="attr">command</span> = <span class="string">&quot;clippy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [[grammar]]</span></span><br><span class="line"><span class="comment"># name = &quot;rust&quot;</span></span><br><span class="line"><span class="comment"># source = &#123; git = &quot;https://github.com/tree-sitter/tree-sitter-rust&quot;, rev = &quot;????&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下这是复制粘贴来的。</span></span><br><span class="line"><span class="section">[[language]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="attr">scope</span> = <span class="string">&quot;source.python&quot;</span></span><br><span class="line"><span class="attr">injection-regex</span> = <span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="attr">file-types</span> = [<span class="string">&quot;py&quot;</span>,<span class="string">&quot;pyi&quot;</span>,<span class="string">&quot;py3&quot;</span>,<span class="string">&quot;pyw&quot;</span>,<span class="string">&quot;ptl&quot;</span>,<span class="string">&quot;.pythonstartup&quot;</span>,<span class="string">&quot;.pythonrc&quot;</span>,<span class="string">&quot;SConstruct&quot;</span>]</span><br><span class="line"><span class="attr">shebangs</span> = [<span class="string">&quot;python&quot;</span>]</span><br><span class="line"><span class="attr">roots</span> = [<span class="string">&quot;setup.py&quot;</span>, <span class="string">&quot;setup.cfg&quot;</span>, <span class="string">&quot;pyproject.toml&quot;</span>]</span><br><span class="line"><span class="attr">comment-token</span> = <span class="string">&quot;#&quot;</span></span><br><span class="line"><span class="attr">language-server</span> = &#123; command = <span class="string">&quot;pyright-langserver&quot;</span>, args = [<span class="string">&quot;--stdio&quot;</span>] &#125;</span><br><span class="line"><span class="attr">indent</span> = &#123; tab-width = <span class="number">4</span>, unit = <span class="string">&quot;    &quot;</span> &#125;</span><br><span class="line"><span class="comment"># will get &quot;Async jobs timed out&quot; errors if this empty config is not added</span></span><br><span class="line"><span class="attr">config</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># [language-server.pyright-langserver.config.check]</span></span><br><span class="line"><span class="comment"># command = &quot;clippy&quot;</span></span><br></pre></td></tr></table></figure><p>在配置文件中 “<code>[[grammar]]</code>“ 底下有指定要安装某个语言的 LSP 服务器，但是我不理解其中一些配置参数。这个配置文件的内容我是仿照 <a href="https://docs.helix-editor.com/languages.html">Languages (helix-editor.com)</a> 复制粘贴的。</p><h2 id="可参考"><a href="#可参考" class="headerlink" title="可参考"></a>可参考</h2><ul><li><a href="https://erasin.wang/helix/tutor">helix editor 中文教程 - 编程与开发</a></li><li><a href="https://github.com/Rhylan2333/my_helix_editor_config/tree/master">GitHub - Rhylan2333&#x2F;my_helix_editor_config: 适合我的Helix编辑器配置文件。</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言管理</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80%E7%AE%A1%E7%90%86.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B/%E8%AF%AD%E8%A8%80%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1><h2 id="nvm-管理-node-版本"><a href="#nvm-管理-node-版本" class="headerlink" title="nvm 管理 node 版本"></a>nvm 管理 node 版本</h2><h3 id="设置国内镜像"><a href="#设置国内镜像" class="headerlink" title="设置国内镜像"></a>设置国内镜像</h3><p>终端输入：</p><p>设置 npm_mirror:</p><p><code>nvm npm_mirror https://npmmirror.com/mirrors/npm/</code></p><p> 设置 node_mirror:</p><p><code>nvm node_mirror https://npmmirror.com/mirrors/node/</code></p><h3 id="全局安装-npm"><a href="#全局安装-npm" class="headerlink" title="全局安装 npm"></a>全局安装 npm</h3><p>安装 node 的时候，npm 其实也已经一起安装了。因为 nvm 可以管理多个版本的 node，如果每次添加一个 node 版本都要安装一堆的包很麻烦，如果有一个 npm 可以让各个版本的 node 共用，就不会这么麻烦了。</p><p>简单的三步就可以配置一个全局的 npm。</p><ol><li><p><code>npm config set prefix E:\nvm\npm</code> &#x2F;&#x2F;配置用 npm 下载包时全局安装的包路径。</p></li><li><p><code>npm install npm -g</code> &#x2F;&#x2F;安装全局 npm，不同的 node 都使用这个 npm。想更新全局的 npm 的话首先删除全局路径 (就是上一行命令的地址，可以使用 npm config ls 查看) 下的 npm，再执行一次这个命令即可。</p></li><li><p>在用户变量中添加 <code>NPM_HOME = E:\nvm\npm</code>，path 中添加%NPM_HOME%。这里需要注意的是，%NPM_HOME% 要添加在%NVM_SYMLINK% 之前，避免 npm 访问到的是 nodejs 中自带的 npm 包管理工具。</p></li></ol><h3 id="使用-nvm-管理版本（nvm-常用命令）"><a href="#使用-nvm-管理版本（nvm-常用命令）" class="headerlink" title="使用 nvm 管理版本（nvm 常用命令）"></a>使用 nvm 管理版本（nvm 常用命令）</h3><p><strong>nvm install latest</strong> 安装最新版本 node.js<br><strong>nvm use 版本号</strong> 使用某一具体版本，例如 ：nvm use 14.3.0<br><strong>nvm list</strong> 列出当前已安装的所有版本<br><strong>nvm ls</strong> 列出当前已安装的所有版本<br><strong>nvm uninstall 版本号</strong> 卸载某一具体版本，例如：nvm use 14.3.0<br><strong>nvm ls-remote</strong> Mac 版本中,列出全部可以安装的 node 版本<br><strong>nvm ls available</strong> windows 版本,列出全部可以安装的 node 版本<br><strong>nvm current</strong> 显示当前的版本<br><strong>nvm alias</strong> 给不同的版本号添加别名<br><strong>nvm unalias</strong> 删除已定义的别名<br><strong>nvm reinstall-packages</strong> 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包</p><h2 id="nrm-使用详解"><a href="#nrm-使用详解" class="headerlink" title="nrm 使用详解"></a>nrm 使用详解</h2><p><a href="https://github.com/Pana/nrm" title=" https://github.com/Pana/nrm">nrm</a>（NPM registry manager）是 npm 的镜像源管理工具，使用它可以快速切换 npm 源。</p><ul><li>全局安装</li></ul><p><code>$ npm i -g nrm</code></p><ul><li>查看版本</li></ul><p><code>$ nrm -V</code></p><ul><li>查看所有源</li></ul><p>其中 <code>*</code> 号表示当前使用的源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ nrm ls</span><br><span class="line"></span><br><span class="line">* npm -------- https://registry.npmjs.org/</span><br><span class="line">  yarn ------- https://registry.yarnpkg.com/</span><br><span class="line">  cnpm ------- http://r.cnpmjs.org/</span><br><span class="line">  taobao ----- https://www.npmmirror.com/</span><br><span class="line">  nj --------- https://registry.nodejitsu.com/</span><br><span class="line">  npmMirror -- https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm ----- http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure><p>或者通过 <code>nrm current</code> 命令查看当前源的名称。</p><ul><li>切换源</li></ul><p>其中 <code>&lt;registry&gt;</code> 就是上面命令所列出来的名称。</p><p>相比上面的命令，是不是方便好记多了。</p><p><code>$ nrm use &lt;registry&gt; # 例如 nrm use taobao</code></p><blockquote><p>注意切换源之后，我们安装依赖仍使用 <code>npm i &lt;name&gt;</code> 的方式来进行安装。</p></blockquote><ul><li>添加源</li></ul><p>适用于企业内部定制的私有源，<code>&lt;registry&gt;</code> 表示源名称，<code>&lt;url&gt;</code> 表示源地址。</p><p><code>$ nrm add &lt;registry&gt; &lt;url&gt;</code></p><ul><li>删除源</li></ul><p><code>$ nrm del &lt;registry&gt;</code></p><ul><li>测试源的响应时间</li></ul><p><code>$ nrm test &lt;registry&gt;</code></p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="uv"><a href="#uv" class="headerlink" title="uv"></a>uv</h2><p><a href="https://hellowac.github.io/uv-zh-cn/">uv-zh-cn</a><br><a href="https://zouper.cn/index.php/archives/123/">UV设置下载镜像 - 一杯好茶</a><br><a href="https://blog.menghuan1918.com/posts/UV_python_packge_manage.html">包管理工具UV使用指南：全面替代conda | Menghuan1918’s Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言/语言环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归档</title>
      <link href="/posts/%E5%BD%92%E6%A1%A3/%E5%BD%92%E6%A1%A3.html"/>
      <url>/posts/%E5%BD%92%E6%A1%A3/%E5%BD%92%E6%A1%A3.html</url>
      
        <content type="html"><![CDATA[<h1 id="油猴脚本访问本地文件"><a href="#油猴脚本访问本地文件" class="headerlink" title="油猴脚本访问本地文件"></a>油猴脚本访问本地文件</h1><h2 id="Chrome-浏览器如何开启文件访问权限"><a href="#Chrome-浏览器如何开启文件访问权限" class="headerlink" title="Chrome 浏览器如何开启文件访问权限"></a>Chrome 浏览器如何开启文件访问权限</h2><p>点击右侧三个点 -》更多工具 -》拓展程序 -》详情</p><p><img src="/../../img/blog/4273299c4c579271d48f0ac66f0c88a7_MD5.png" alt="图片.png" title="图片.png"></p><p>打开允许访问文件网址</p><p><img src="/../../img/blog/0f54277cfaba5532eec2d80e0ac5e5ac_MD5.png" alt="图片.png" title="图片.png"></p><h2 id="火狐浏览器如何开启文件访问权限"><a href="#火狐浏览器如何开启文件访问权限" class="headerlink" title="火狐浏览器如何开启文件访问权限"></a>火狐浏览器如何开启文件访问权限</h2><p>FireFox 默认没有提供一个页面可以设置这个选项，但可以通过修改浏览器的配置项，来达到目地。</p><p>具体方法如下：</p><p>I: 在地址栏输入 <code>about:config</code> 并回车, 进入配置项页面 (可能会有一个警告页面，直接点击按钮进入就好了）。</p><p>II: 配置以下三项</p><table><thead><tr><th>条目名称</th><th>值</th><th>提醒</th></tr></thead><tbody><tr><td>capability.policy.policynames</td><td>localfilelinks</td><td>-</td></tr><tr><td>capability.policy.localfilelinks.sites</td><td>moz-extension:&#x2F;&#x2F;612ab18c-c29e-4211-bd50-3f208d227db7</td><td>这个值，你应该使用自己拿到的 <code>扩展标识</code>, 如果你允许多个扩展的话，这里用空格隔开</td></tr><tr><td>capability.policy.localfilelinks.checkloaduri.enabled</td><td>allAccess</td><td>-</td></tr></tbody></table><p>这样操作:</p><p>复制条目名称，粘帖到搜索栏进行搜索, 如果搜索到，就双击修改它的值就行了。</p><p>如果没有搜索到，就鼠标右键 &gt; 新建 &gt; 字符串 (String)，把 <code>条目名称</code> 和 <code>值</code> 依次粘帖进去即可。</p><h2 id="打开-Tampermonkey-文件访问地址"><a href="#打开-Tampermonkey-文件访问地址" class="headerlink" title="打开 Tampermonkey 文件访问地址"></a>打开 Tampermonkey 文件访问地址</h2><p>打开设置 -》高级</p><p><img src="/../../img/blog/d79d945c4e0e893c85f498c0bccb994a_MD5.png" alt="图片.png" title="图片.png"></p><p>进入安全项 -》允许脚本访问本地文件，选择所有本地文件，修改后保存</p><p><img src="/../../img/blog/fbc81377c82c6f738e61cf3c66931d67_MD5.png" alt="图片.png" title="图片.png"></p><h2 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h2><p>在脚本中添加以下内容并保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// @match          file:///*</span><br></pre></td></tr></table></figure><h1 id="CSDN-下载文章"><a href="#CSDN-下载文章" class="headerlink" title="CSDN 下载文章"></a>CSDN 下载文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(function doPrint()&#123;      </span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var articleBox = $(&quot;div.article_content&quot;);</span><br><span class="line">articleBox.removeAttr(&quot;style&quot;);</span><br><span class="line">var head_str = &quot;&quot;;       </span><br><span class="line">var foot_str = &quot;&quot;;   </span><br><span class="line">var older = document.body.innerHTML;       </span><br><span class="line">var title= document.getElementsByClassName(&#x27;article-title-box&#x27;)[0].innerHTML; </span><br><span class="line">var main_body = document.getElementsByClassName(&#x27;article_content&#x27;)[0].innerHTML;</span><br><span class="line">document.body.innerHTML = head_str + title + main_body + foot_str;</span><br><span class="line">$(&quot;#mainBox&quot;).width(&quot;100%&quot;);</span><br><span class="line">document.getElementsByTagName(&#x27;body&#x27;)[0].style.zoom=0.8;     </span><br><span class="line">window.print();</span><br><span class="line">document.body.innerHTML = older;</span><br><span class="line">return false;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/p1279030826/article/details/106602341">【新】CSDN文章一键打印、输出PDF（自动阅读全文、全清爽模式）csdn打印_JavonPeng的博客-CSDN博客</a></p><h1 id="kms-激活-office-visio2019"><a href="#kms-激活-office-visio2019" class="headerlink" title="kms 激活 office+visio2019"></a>kms 激活 office+visio2019</h1><p><a href="https://www.cnblogs.com/shan333/p/14894774.html">kms 激活 office+visio2019</a></p><h1 id="visio-使用"><a href="#visio-使用" class="headerlink" title="visio 使用"></a>visio 使用</h1><p><a href="https://zhuanlan.zhihu.com/p/341329517">visio教程：如何调整连接线上文字的位置</a><br><a href="https://blog.csdn.net/zz603976046/article/details/109079481">visio如何使箭头指向插图的任意一处</a></p><h1 id="坚果云清除"><a href="#坚果云清除" class="headerlink" title="坚果云清除"></a>坚果云清除</h1><p> <strong>文件资源管理器图标删除</strong></p><p>使用电脑应用管理删除坚果云</p><p><strong>Windows 清理桌面右键菜单中新增选项中的多余选项</strong></p><p>在卸载坚果云时一开始没注意，最近在使用的时候发现右键新增的里面出现了 <code>.nol</code> 等坚果云的文件，于是找了一下能删除多余选项的方法。感觉自己以后还能用到所以记下来方便自己查阅。</p><ol><li><p>找到需要删去选项对应的扩展名</p></li><li><p>打开注册表编辑器</p></li><li><p><code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Discardable\PostSetup\ShellNew\Classes</code></p><p> <img src="/../../img/blog/%E5%9D%9A%E6%9E%9C%E4%BA%91%E6%B8%85%E9%99%A4-1.png"></p></li><li><p>删去其中你不要的扩展名</p><p> <img src="/../../img/blog/65510735567700606.png"></p></li><li><p>按照以上步骤操作完成后，发现已经消失的残留项再次出现，说明软件卸载后，注册表未清理干净。请按照以下路径寻找【<code>HKEY_CLASSES_ROOT\.gf\ShellNew</code>】，右键单击【NullFile】，左键单击【删除（D）】。</p></li></ol><p>[<img src="/../../img/blog/06701246621604386.png"></p><blockquote><p>我自己并没有出现 <code>NullFile</code> 选项，我选择将整个 ShellNew 都给删去了</p></blockquote><p>此时回到桌面查看右键新建菜单应该已经清理完毕</p><h1 id="免杀项目"><a href="#免杀项目" class="headerlink" title="免杀项目"></a>免杀项目</h1><h2 id="专利"><a href="#专利" class="headerlink" title="专利"></a>专利</h2><ul><li><a href="https://github.com/scmanjarrez/pymetangine">scmanjarrez&#x2F;pymetangine: A python metamorphic engine for PE&#x2F;PE+ files. (github.com)</a></li><li><a href="https://github.com/OmegaPointZero/Caveman">https://github.com/OmegaPointZero/Caveman</a></li><li><a href="https://github.com/guitmz/ezuri">https://github.com/guitmz/ezuri</a></li><li><a href="https://github.com/sebastiencs/Packer_ELF">sebastiencs&#x2F;Packer_ELF: ELF packer - x86_64 (github.com)</a></li></ul><h1 id="Windows-11-22H2-开启-DoH（DNS-over-HTTPS）"><a href="#Windows-11-22H2-开启-DoH（DNS-over-HTTPS）" class="headerlink" title="Windows 11 22H2 开启 DoH（DNS over HTTPS）"></a>Windows 11 22H2 开启 DoH（DNS over HTTPS）</h1><p><a href="https://zhuanlan.zhihu.com/p/590105276">Windows 11 22H2开启 DoH（DNS over HTTPS） - 知乎 (zhihu.com)</a><br><a href="https://www.icoa.cn/a/953.html">Edge 和 Chrome 浏览器设置 DoH 加密 DNS 的方法-逍遥峡谷 (icoa.cn)</a></p><h1 id="在-Windows-11-中卸载-Microsoft-Edge-和阻止-Microsoft-Edge-重新安装"><a href="#在-Windows-11-中卸载-Microsoft-Edge-和阻止-Microsoft-Edge-重新安装" class="headerlink" title="在 Windows 11 中卸载 Microsoft Edge 和阻止 Microsoft Edge 重新安装"></a>在 Windows 11 中卸载 Microsoft Edge 和阻止 Microsoft Edge 重新安装</h1><p><a href="https://www.sysgeek.cn/windows-11-uninstall-microsoft-edge/">https://www.sysgeek.cn/windows-11-uninstall-microsoft-edge/</a></p><h1 id="gitbook-两个-bug-解决方法与修复工具"><a href="#gitbook-两个-bug-解决方法与修复工具" class="headerlink" title="gitbook 两个 bug 解决方法与修复工具"></a>gitbook 两个 bug 解决方法与修复工具</h1><p><a href="https://www.imxqy.com/soft/gitbook-repair.html">https://www.imxqy.com/soft/gitbook-repair.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 归档 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>资源</title>
      <link href="/posts/%E5%BD%92%E6%A1%A3/%E8%B5%84%E6%BA%90.html"/>
      <url>/posts/%E5%BD%92%E6%A1%A3/%E8%B5%84%E6%BA%90.html</url>
      
        <content type="html"><![CDATA[<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li><a href="https://author.cnki.net/#/index">格式精灵 (cnki.net)</a></li><li><a href="https://qinglian.tencent.com/console/">腾讯轻联 (tencent.com)</a></li><li><a href="https://tools.pdf24.org/zh/">PDF24 Tools: 免费且易于使用的在线PDF工具</a></li></ul><h1 id="面试利器"><a href="#面试利器" class="headerlink" title="面试利器"></a>面试利器</h1><ul><li><a href="https://www.yuque.com/tuobaaxiu/inyebp/tk3ywg">推荐一个绝对能提高面试官印象分的知识点！ 已完结</a></li><li><a href="https://www.yuque.com/tuobaaxiu/inyebp/ot15gy#c3JFk">前人给你留下的15条CS校招金玉良言 已完结</a></li><li><a href="https://www.yuque.com/tuobaaxiu/inyebp/qwgm66">红黑树</a></li><li><a href="https://top.interviewguide.cn/issue/736">如何设计一个高性能&#x2F;高并发&#x2F;高可用&#x2F;高可靠&#x2F;可扩展的系统?</a></li><li><a href="https://www.yuque.com/tuobaaxiu/inyebp/hab3v1dzvikd2bhk?singleDoc#bcmWY">C++项目の斯坦福CS144计网大作业项目（有风来）</a></li><li><a href="https://www.yuque.com/tuobaaxiu/inyebp/ga811sru92egykup?singleDoc#ad2zV">C++项目の高性能通讯脚手架项目（DongGu）</a></li></ul><h1 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h1><h2 id="全国一二线城市知名互联网公司大盘点"><a href="#全国一二线城市知名互联网公司大盘点" class="headerlink" title="全国一二线城市知名互联网公司大盘点"></a>全国一二线城市知名互联网公司大盘点</h2><p>上海互联网公司盘点（已完结，共 225 家）链接：<a href="https://www.yuque.com/docs/share/49d754e1-b868-46e4-ab02-8e2b153799fc">https://www.yuque.com/docs/share/49d754e1-b868-46e4-ab02-8e2b153799fc</a><br>杭州互联网公司盘点（已完结，共 101 家） 链接：<a href="https://www.yuque.com/docs/share/dd41eee7-6c88-4659-a21c-9fdf11d1b12e">https://www.yuque.com/docs/share/dd41eee7-6c88-4659-a21c-9fdf11d1b12e</a></p><p>苏州互联网公司盘点（已完结，共 38 家） 链接：<a href="https://www.yuque.com/docs/share/8a010f17-a528-4068-a577-43d4ca6b9256">https://www.yuque.com/docs/share/8a010f17-a528-4068-a577-43d4ca6b9256</a></p><h1 id="考公"><a href="#考公" class="headerlink" title="考公"></a>考公</h1><ul><li><a href="https://www.nowcoder.com/discuss/361219661281738752">一年半我考了11次公务员，内附考试细节，不看血亏_牛客网 (nowcoder.com)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 归档 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vmware安装配置Ubuntu</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/Vmware%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEUbuntu.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/Vmware%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEUbuntu.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载-Ubuntu"><a href="#下载-Ubuntu" class="headerlink" title="下载 Ubuntu"></a>下载 Ubuntu</h1><p><a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/">Index of &#x2F;ubuntu-releases&#x2F; | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><h1 id="安装-VMware-Tools"><a href="#安装-VMware-Tools" class="headerlink" title="安装 VMware Tools"></a>安装 VMware Tools</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install open-vm-tools-desktop -y</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><h1 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h1><ol><li><p>在 vmware 中设置共享文件夹<br>即在 VMware workstation 中：虚拟机设置 -》选项 -》共享文件夹，浏览要共享的文件夹，继续按照说明设置即可。</p></li><li><p>在 linux 中链接一下即可<br>第 1 步完成后，共享文件夹已经挂载到了 <code>/mnt/hgfs/share/</code> ,share 是我的共享文件夹的名字，然后在创建一个软连接方便以后访问：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /mnt/hgfs/share/ /home/share</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-重启后不显示共享文件夹"><a href="#Ubuntu-重启后不显示共享文件夹" class="headerlink" title="Ubuntu 重启后不显示共享文件夹"></a>Ubuntu 重启后不显示共享文件夹</h2><p>重启 Ubuntu20.04 后，发现共享文件夹进不去也不显示了<br>首先查看共享文件夹是否已经存在并且设置为总是开启<br>使用命令查看当前挂载的共享文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmware-hgfsclient</span><br></pre></td></tr></table></figure><p>存在的情况下，然后使用下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other</span><br></pre></td></tr></table></figure><p><a href="https://docs.vmware.com/cn/VMware-Workstation-Pro/17/com.vmware.ws.using.doc/GUID-AB5C80FE-9B8A-4899-8186-3DB8201B1758.html">在 Linux 客户机中装载共享文件夹 (vmware.com)</a></p><p>但是由于上面的方法需要每次重启后都去设置一遍，可以把执行的命令放到&#x2F;etc&#x2F;rc.local 文件下；让它开机自动执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/rc.local</span><br></pre></td></tr></table></figure><p>若&#x2F;etc&#x2F;rc.local 是一个空文件则在里面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh -e</span><br><span class="line">sudo vmhgfs-fuse .host:/ /mnt/hgfs -o nonempty -o allow_other</span><br></pre></td></tr></table></figure><p>给文件执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure><p>最后重启虚拟机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="虚拟机-Deepin-网线未连接"><a href="#虚拟机-Deepin-网线未连接" class="headerlink" title="虚拟机 Deepin 网线未连接"></a>虚拟机 Deepin 网线未连接</h2><p>不小心将虚拟机 <a href="https://so.csdn.net/so/search?q=ubuntu&spm=1001.2101.3001.7020">ubuntu</a>&#x2F;deepin 强制关机后，重启之后系统显示网卡未连接。<br>解决办法：<br>编辑文件&#x2F;etc&#x2F;network&#x2F;interfaces:<br>sudo vi &#x2F;etc&#x2F;network&#x2F;interfaces，在文件里加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto ens33</span><br><span class="line">iface ens33 inet dhcp</span><br></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure><h2 id="vmware-虚拟机网卡不启动时的-service-NetworkManager-修复"><a href="#vmware-虚拟机网卡不启动时的-service-NetworkManager-修复" class="headerlink" title="vmware 虚拟机网卡不启动时的 service NetworkManager 修复"></a>vmware 虚拟机网卡不启动时的 service NetworkManager 修复</h2><h3 id="检查-Windows-下的-Vmware-虚拟机网络相关服务是否开启"><a href="#检查-Windows-下的-Vmware-虚拟机网络相关服务是否开启" class="headerlink" title="检查 Windows 下的 Vmware 虚拟机网络相关服务是否开启"></a>检查 Windows 下的 Vmware 虚拟机网络相关服务是否开启</h3><p><img src="/../../../img/blog/0dd2e698444a07e3d24ae66ce90bed4d_MD5.png" alt="image.png"></p><h3 id="检查虚拟接网络配置设置是否正确"><a href="#检查虚拟接网络配置设置是否正确" class="headerlink" title="检查虚拟接网络配置设置是否正确"></a>检查虚拟接网络配置设置是否正确</h3><p>检查 vmware workstation 的网络配置是否符合主机的虚拟网卡配置，若不确定就点击还原默认设置<br><img src="/../../../img/blog/8f86b52d506cbb4260790e6f77103348_MD5.png" alt="image.png"></p><h3 id="检查虚拟机-Ubuntu-系统右上角的网络连接是否存在"><a href="#检查虚拟机-Ubuntu-系统右上角的网络连接是否存在" class="headerlink" title="检查虚拟机 Ubuntu 系统右上角的网络连接是否存在"></a>检查虚拟机 Ubuntu 系统右上角的网络连接是否存在</h3><p>若不存在，网络就可能连不上</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>（1）删除 NetworkManager 缓存文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service NetworkManager stop</span><br><span class="line">sudo <span class="built_in">rm</span> /var/lib/NetworkManager/NetworkManager.state</span><br><span class="line">service NetworkManager start</span><br></pre></td></tr></table></figure><p>（2）修改&#x2F;etc&#x2F;NetworkManager&#x2F;NetworkManager.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/NetworkManager/NetworkManager.conf</span><br><span class="line"><span class="comment">##找到managed=false修改为：managed=true</span></span><br></pre></td></tr></table></figure><p>（3）重启 NetworkManager</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service network-manager restart</span><br></pre></td></tr></table></figure><p>就可以看到系统右上角出现了网络图标，重启虚拟机，搞定！</p><h2 id="Ubuntu22-04-在-VMware-17-无法实现拖放复制操作解决办法"><a href="#Ubuntu22-04-在-VMware-17-无法实现拖放复制操作解决办法" class="headerlink" title="Ubuntu22.04 在 VMware 17 无法实现拖放复制操作解决办法"></a>Ubuntu22.04 在 VMware 17 无法实现拖放复制操作解决办法</h2><p><a href="https://blog.csdn.net/ZRongZH/article/details/129237476">Ubuntu22.04 在 VMware 17 无法实现拖放复制操作解决办法_ubuntu无法拖拽文件-CSDN博客</a></p><h2 id="ubuntu-开启-125-、150-、175-缩放比例"><a href="#ubuntu-开启-125-、150-、175-缩放比例" class="headerlink" title="ubuntu 开启 125%、150%、175% 缩放比例"></a>ubuntu 开启 125%、150%、175% 缩放比例</h2><p>点击导航栏最右边的自由缩放，打开全屏后退出全屏<br>可参考 <a href="https://zhuanlan.zhihu.com/p/588666878">Ubuntu自由调整显示比例 - 知乎 (zhihu.com)</a> 对虚拟机不一定有用</p><h2 id="虚拟机不能上网，ifconfig-后只有-lo，没有-ens33-等信息"><a href="#虚拟机不能上网，ifconfig-后只有-lo，没有-ens33-等信息" class="headerlink" title="虚拟机不能上网，ifconfig 后只有 lo，没有 ens33 等信息"></a>虚拟机不能上网，ifconfig 后只有 lo，没有 ens33 等信息</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p><img src="/../../../img/blog/27a9772ac09683210d7a53269a5cb50a_MD5.png" alt="在这里插入图片描述"><br>ifconfig 后只有一个 lo，好像其他网卡驱动都没有启动一样。</p><h3 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h3><p>输入 ifconfig -a</p><p><img src="/../../../img/blog/95a40c634df65f08a92e738ff9b9a2cc_MD5.png" alt="在这里插入图片描述"></p><p>发现了需要的网卡驱动，但是却没有 ip 地址啥的。</p><p>尝试一下几条条指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ifconfig ens33 up</span><br><span class="line"></span><br><span class="line">sudo dhclient ens33</span><br><span class="line"></span><br><span class="line">sudo ifconfig ens33（这条指令测试好了之后我的 OK 了）</span><br><span class="line"></span><br><span class="line">sudo systemctl restart network-manager.service //重启网卡</span><br></pre></td></tr></table></figure><p>如果问题解决了，会是这种：<br><img src="/../../../img/blog/2b10fed180895ab2931e726a8e6f4134_MD5.png" alt="在这里插入图片描述"></p><p>随后再输入 ifconfig 指令<br><img src="/../../../img/blog/e80fddd0477a103b11f731eb3505d6d8_MD5.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xmake</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B/xmake.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B/xmake.html</url>
      
        <content type="html"><![CDATA[<h1 id="xmake-从入门到精通"><a href="#xmake-从入门到精通" class="headerlink" title="xmake 从入门到精通"></a>xmake 从入门到精通</h1><p><a href="https://www.zhihu.com/column/c_1537535487199281152">A Tour of xmake - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/96031862">xmake从入门到精通9：交叉编译详解 - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/97094249">xmake从入门到精通10：多个子工程目标的依赖配置 - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/129064618">xmake从入门到精通11：如何组织构建大型工程 - 知乎 (zhihu.com)</a><br><a href="https://zhuanlan.zhihu.com/p/161553522">xmake从入门到精通12：通过自定义脚本实现更灵活地配置 - 知乎 (zhihu.com)</a></p><h1 id="clion"><a href="#clion" class="headerlink" title="clion"></a>clion</h1><p><a href="https://blog.csdn.net/m0_69086552/article/details/130444581">xmake配合clion用指南-CSDN博客</a><br><a href="https://zhuanlan.zhihu.com/p/640701847">Xmake 新手教程 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian 配置</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/Obsidian%20%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/Obsidian%20%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="Remotely-Save"><a href="#Remotely-Save" class="headerlink" title="Remotely Save"></a>Remotely Save</h1><p><a href="https://www.bilibili.com/video/BV1y54y1K7bV/?spm_id_from=333.999.0.0&vd_source=254fbc04b5fe132d6c95727aac670dea">obsidian+webDav网盘同步教程，笔记轻松同步，实现存储自由_哔哩哔哩_bilibili</a></p><h1 id="在-Obsidian-中执行-Shell-命令"><a href="#在-Obsidian-中执行-Shell-命令" class="headerlink" title="在 Obsidian 中执行 Shell 命令"></a>在 Obsidian 中执行 Shell 命令</h1><p>而 Shell commands 可以在 Obsidian 中设置好命令，并通过 Obsidian 的命令面板或快捷键快速运行。</p><p>在插件设置面板中添加命令：</p><p><img src="/../../../img/blog/48f3cbd2ed2ea9918c17f72ba4e3e2f1_MD5.webp"></p><p>运行博客：</p><ul><li>Shell commands 没有显示终端窗口的功能，所以需要我们启动 powershell 再传入命令</li><li>有了终端窗口我们才可以在窗口中按 Ctrl + C 关闭 Hexo 服务，否则它会一直占用端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start powershell <span class="string">&#x27;-NoExit -Command start http://localhost:4000 ; cd Blog ; hexo s&#x27;</span></span><br></pre></td></tr></table></figure><p>打开站点和主题配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start Blog/_config.yml</span><br><span class="line">start Blog/themes/butterfly4.3.1/_config.yml</span><br></pre></td></tr></table></figure><p>然后修改默认执行环境为 PowerShell 5：</p><p><img src="/../../../img/blog/a71dfad1e73f7d9f594fcc596e01b933_MD5.webp"></p><p>点这个按钮可以执行测试我们的命令：</p><p><img src="/../../../img/blog/a5f82f052ff8f87198c08d18cc7af9b9_MD5.webp"></p><p>如果你遇到了这个错误：<code>hexo:无法加载文件C:\Users\xxx\AppData\Roaming\npm\hexo.ps1，因为在此系统上禁止运行脚本。</code> 只需在 Windows 设置&gt;更新和安全&gt;开发者选项，找到 PowerShell，点下应用即可：</p><p><img src="/../../../img/blog/d23fe3ad93154ab94982bbe124d0e4c8_MD5.webp"></p><p>Ctrl+P 打开命令面板，输入 Shell commands 即可找到我们定义好的命令：</p><p><img src="/../../../img/blog/3462bd22140ba71844ee901f66488eae_MD5.webp"></p><p>可以为每个命令设置下别名，就是在命令面板显示的名字：</p><p><img src="/../../../img/blog/73564a2b5df297eafa35b27106300f77_MD5.png"></p><p><img src="/../../../img/blog/f44caffc478975f0b99d1d7569206153_MD5.webp"></p><p>在 Hotkeys 面板中为我们的命令设置好快捷键，就可以通过快捷键快速执行命令了：</p><p><img src="/../../../img/blog/43cdf9a774dbfec85ff37576057b5034_MD5.webp"></p><h1 id="附件管理"><a href="#附件管理" class="headerlink" title="附件管理"></a>附件管理</h1><ul><li>在 Ob 库中建立一个附件文件夹，也就是专门用来存储附件的</li><li>打开设置→文件与链接 -&gt;指定的附件文件夹</li></ul><h1 id="快速插入模板"><a href="#快速插入模板" class="headerlink" title="快速插入模板"></a>快速插入模板</h1><ul><li>安装插件 Hotkeys for templates</li><li>打开 Hotkeys for templates 配置界面，一共分为三大块：Templator-obsidian 插件；核心模板插件；在特定的文件夹创建笔记会自动添加特定的模板</li></ul><p>咱们的需求是在特定的文件夹下新建笔记就会自动加载特定模板</p><p>那么，接下来就在 Templator-obsidian 模块或者核心模板模块中启用一个模板</p><p>来到 Create a new file in a specified folder with a specified template</p><p><img src="/../../img/blog/%E5%BF%AB%E9%80%9F%E6%8F%92%E5%85%A5%E6%A8%A1%E6%9D%BF-1.png"></p><p>点击 ADD 添加</p><h1 id="Obsidian-Git"><a href="#Obsidian-Git" class="headerlink" title="Obsidian Git"></a>Obsidian Git</h1><p>根目录创建一个 <code>.gitignore</code>，忽略掉 <code>.obsidian/workspace.json</code></p><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init    </span><br><span class="line">git add .    </span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><p>github 创建一个空仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:xxx</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="/../../img/blog/bb08041ebda0fd3abe12964bd6ca13bb_MD5.png"><br>打开插件设置界面，可以修改一下自动提交和手动提交的日志，我设置的是主机名 + 日期：</p><p><img src="/../../img/blog/4bfc7dad739c897acc45c75020c6e528_MD5.webp"></p><p>在提交信息设置里，可以修改主机名和日期格式，修改完成后点 Preview 可以预览提交信息：</p><p><img src="/../../img/blog/d9de7988f0b0e05d637c208ee1af1f12_MD5.webp"><br>快捷键 <code>Ctrl + P</code> 打开命令面板，输入 open source control view 启用可视化操作面板<br>然后在右侧菜单栏就可以看到操作面板了：</p><p><img src="/../../img/blog/2e724dfb7052ff16e35ad4083a764a48_MD5.webp"><br>一般操作就是：保存所有&gt;提交&gt;推送，就可以更新到 Git 服务器了，如下图顺序</p><p><img src="/../../img/blog/0e27ff82d7b40c4d1e96eaea51546248_MD5.jpg"></p><p>启用自动拉取功能，每次打开知识库就会自动拉取：</p><p><img src="/../../img/blog/0c1a0b636570aa507d23b4ffbddb0ed2_MD5.webp"></p><p>如果在使用过程中有报错的话，<code>Ctrl+Shift+I</code> 在控制台里可以查看详细日志，所有插件的日志都可以在这里看到：</p><p><img src="/../../img/blog/91a3e33577e44f1e48b2fb867ad67a60_MD5.webp"></p><h1 id="在-Obsidian-阅读并批注-Pdf-或-Epub-文档"><a href="#在-Obsidian-阅读并批注-Pdf-或-Epub-文档" class="headerlink" title="在 Obsidian 阅读并批注 Pdf 或 Epub 文档"></a>在 Obsidian 阅读并批注 Pdf 或 Epub 文档</h1><h2 id="下载-Annotator-插件"><a href="#下载-Annotator-插件" class="headerlink" title="下载 Annotator 插件"></a>下载 Annotator 插件</h2><h2 id="添加文件入-Obsidian"><a href="#添加文件入-Obsidian" class="headerlink" title="添加文件入 Obsidian"></a>添加文件入 Obsidian</h2><p>把你想要阅读的 pdf 或 epub 文件拖曳进指定的 obsidian 文件夹。当然，也可以直接拖曳到根目录下。我个人习惯是把 pdf 文件统一用一个文件夹放置，是为了让文件更有秩序。<br><img src="/../../img/blog/1aa4c304d8a14e8135bd00e7795c4a7e_MD5.png" alt="图片"></p><h2 id="编辑文档"><a href="#编辑文档" class="headerlink" title="编辑文档"></a>编辑文档</h2><p>在 obsidian 新建一个文档，这个文档就是你阅读这本书或者这篇论文之后的笔记文档。</p><p>在这个文档的开头，写上这三行代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">annotation-target:</span> <span class="string">xxxx.pdf</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>其中，xxxx 的部分是写你目标文件所在的位置，比如我要提取王甦 - 认知心理学这个 pdf 文件，它所在的位置就是：Import Files&#x2F;PDF Files。</p><p>下图红色框框的部分就是你目标 pdf 文件的路径。记得最后要加上【.pdf】或者【.epub】这个后缀。</p><p><img src="/../../img/blog/202345e3c42e50d19624f047cf1730b6_MD5.png" alt="图片"></p><h2 id="切换成-Annotate-模式"><a href="#切换成-Annotate-模式" class="headerlink" title="切换成 Annotate 模式"></a>切换成 Annotate 模式</h2><p>完成第三步后，点开右上角的三个点，点击 Annotate 之后，就出现 pdf 文件和右侧栏标注视图了（如下图）。</p><p><img src="/../../img/blog/78633ce77103e46a1e6dfa8be8351e6c_MD5.png" alt="图片"></p><p><img src="/../../img/blog/40257ecda330e9a4e0e552297347b9e5_MD5.png" alt="图片"></p><h2 id="完成阅读后，切换回-Markdown-模式"><a href="#完成阅读后，切换回-Markdown-模式" class="headerlink" title="完成阅读后，切换回 Markdown 模式"></a>完成阅读后，切换回 Markdown 模式</h2><p>Annotator 最重要的功能就是能够直接在 pdf 文件上进行高亮和批注。等完成阅读后，点击右上角的三个点，点击 Open as Markdown 之后，再点击右上角切换成 “ 阅读视图 “，就可以看到你的高亮和批注啦。</p><p><img src="/../../img/blog/d5b67d5b541ce075e1b03442f392fc1c_MD5.png" alt="图片"></p><h2 id="进一步深加工你的批注"><a href="#进一步深加工你的批注" class="headerlink" title="进一步深加工你的批注"></a>进一步深加工你的批注</h2><p>Annotator 会帮你自动整理你在阅读过程中所批注和高亮的内容。</p><p>当你得到一篇你的笔记之后，你就可以进一步整理你的这些碎片笔记了，让这些碎片笔记真正为你所吸收，成为一篇读书报告或者书评。</p><p><img src="/../../img/blog/c758a95b637468bb9b45489f8c9c4db0_MD5.png" alt="图片"></p><h1 id="想做视屏、会议笔记-在-Obsidian-中这款插件可以帮轻松保存视屏中的重点"><a href="#想做视屏、会议笔记-在-Obsidian-中这款插件可以帮轻松保存视屏中的重点" class="headerlink" title="想做视屏、会议笔记?在 Obsidian 中这款插件可以帮轻松保存视屏中的重点"></a>想做视屏、会议笔记?在 Obsidian 中这款插件可以帮轻松保存视屏中的重点</h1><p><a href="https://mp.weixin.qq.com/s/FZPyCYnFQYFbjrhzRau64Q">mp.weixin.qq.com&#x2F;s&#x2F;FZPyCYnFQYFbjrhzRau64Q</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="https://pkmer.cn/Pkmer-Docs/10-obsidian/obsidian%E7%A4%BE%E5%8C%BA%E6%8F%92%E4%BB%B6/typewriter-mode/">Obsidian 插件：Typewriter Mode 更完美的打字机模式 (pkmer.cn)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地软件配置1</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/%E6%9C%AC%E5%9C%B0%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE1.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/%E6%9C%AC%E5%9C%B0%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h1><h2 id="将-Scoop-安装到自定义目录-命令行方式-设置环境变量）"><a href="#将-Scoop-安装到自定义目录-命令行方式-设置环境变量）" class="headerlink" title="将 Scoop 安装到自定义目录 (命令行方式)(设置环境变量）"></a>将 Scoop 安装到自定义目录 (命令行方式)(设置环境变量）</h2><p><code>$env:SCOOP=&#39;D:\Applications\Scoop&#39; </code><br><code>[Environment]::SetEnvironmentVariable(&#39;SCOOP&#39;, $env:SCOOP, &#39;User&#39;)</code></p><h2 id="将-Scoop-配置为将全局程序安装到自定义目录-SCOOP-GLOBAL-命令行方式"><a href="#将-Scoop-配置为将全局程序安装到自定义目录-SCOOP-GLOBAL-命令行方式" class="headerlink" title="将 Scoop 配置为将全局程序安装到自定义目录 SCOOP_GLOBAL(命令行方式)"></a>将 Scoop 配置为将全局程序安装到自定义目录 SCOOP_GLOBAL(命令行方式)</h2><p><code>$env:SCOOP_GLOBAL=&#39;F:\GlobalScoopApps&#39;</code><br><code>[Environment]::SetEnvironmentVariable(&#39;SCOOP_GLOBAL&#39;, $env:SCOOP_GLOBAL, &#39;Machine&#39;)</code></p><h2 id="安装并镜像加速"><a href="#安装并镜像加速" class="headerlink" title="安装并镜像加速"></a>安装并镜像加速</h2><ul><li><a href="https://gitee.com/scoop-installer">scoop-installer: scoop及bucket镜像站</a></li><li><a href="https://gitee.com/scoop-installer/scoop">Scoop: scoop国内镜像优化库，能够加速scoop安装及bucket源文件，无需用户设置代理。内置加速站有调用次数限制，请勿提取滥用。 镜像频率：12小时。</a></li></ul><h1 id="NSSM—封装-windows-服务工具"><a href="#NSSM—封装-windows-服务工具" class="headerlink" title="NSSM—封装 windows 服务工具"></a>NSSM—封装 windows 服务工具</h1><p><strong>NSSM 是一个服务封装程序，它可以将普通 exe 程序或 bat 文件封装成服务，使之像 windows 服务一样运行</strong>。同类型的工具还有微软自己的 srvany，不过 nssm 更加简单易用，并且功能强大。它的特点如下：</p><p><strong>1.支持普通 exe 程序（控制台程序或者带界面的 Windows 程序都可以）或 bat 文件</strong></p><p><strong>2.安装简单又方便</strong></p><p><strong>3.可以重定向输出（并且支持 Rotation）</strong></p><p><strong>4.可以自动守护封装了的服务，程序挂掉了后可以自动重启</strong></p><p><strong>5.可以自定义环境变量</strong></p><p><strong>6.可以自定义启动参数</strong></p><p><strong>NSSM 常用命令，</strong>如下：</p><p><strong>1.安装服务：nssm install 服务名称</strong></p><p><strong>2.删除服务：nssm remove 服务名称</strong></p><p><strong>3.删除服务确定：nssm remove 服务名称 confirm</strong></p><p><strong>4.修改服务（显示界面修改）：nssm edit 服务名称</strong></p><p><strong>5.启动服务：nssm start 服务名称</strong></p><p><strong>6.停止服务：nssm stop 服务名名称</strong></p><p><strong>7.停止服务：nssm stop 服务名称</strong></p><p><strong>NSSM 使用步骤</strong>，如下：</p><p><strong>注册服务弹出如下 NSSM 界面</strong>，如下图：</p><p><img src="/../../img/blog/995ccd62bbd6febec71419597ff0c125_MD5.webp"></p><p>注册服务</p><p>设置说明，如下：</p><p><strong>1.Application Path: 选择系统安装的 exe 或 bat。</strong></p><p><strong>2.Startup directory: 选择 exe 或 bat 项目的根目录。</strong></p><p><strong>3.Arguments: 输入启动参数。</strong></p><p>上述步骤操作完成，即可点击 Install service 来注册服务。我们在系统的服务中即可找到刚刚注册的服务。</p><p><img src="/../../img/blog/e2d9007b90d24b64941a9491919659b8_MD5.webp"></p><p>安装成功</p><p><img src="/../../img/blog/e3be526bf010091371d60c21a5204060_MD5.webp"></p><p>新安装的 windows 服务</p><p>在系统服务中找到刚刚注册的服务，右键属性 - 恢复即可设置此服务挂掉重启等内容。<br><strong>需要注意一点，安装完服务后，需要启动服务，否则没有生效</strong>。</p><h1 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/504190202">超详细PotPlayer教程：下载安装与优化设置 保姆级教程 - 知乎 (zhihu.com)</a></li><li><a href="https://www.appinn.com/potplayer-webdav-alist/">PotPlayer 直接播放网盘视频：连接 Alist，接入阿里云盘、百度&#x2F;夸克网盘等 - 小众软件 (appinn.com)</a></li></ul><h1 id="zerotrust"><a href="#zerotrust" class="headerlink" title="zerotrust"></a>zerotrust</h1><h2 id="tunnel"><a href="#tunnel" class="headerlink" title="tunnel"></a>tunnel</h2><ul><li><a href="https://sspai.com/post/79278#!">CloudFlare Tunnel 免费内网穿透的简明教程 - 少数派 (sspai.com)</a></li><li><a href="https://blog.borber.top/tech/cf-tunnel-proxy-ssh/">cloudflare tunnel 代理 ssh | BORBER</a></li><li><a href="https://zhuanlan.zhihu.com/p/621870045">使用cloudflare tunnel免费内网穿透，实现网站的外网访问和远程桌面 - 知乎 (zhihu.com)</a></li></ul><h1 id="keypass"><a href="#keypass" class="headerlink" title="keypass"></a>keypass</h1><ul><li><a href="https://blog.csdn.net/axutongxue/article/details/118696485?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166020252516781432997626%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166020252516781432997626&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-118696485-null-null.142%5Ev40%5Epc_rank_34_ctr0,185%5Ev2%5Econtrol&utm_term=%E9%98%BF%E8%99%9A%E5%90%8C%E5%AD%A6&spm=1018.2226.3001.4187">5千字长文：KeePass完全入门指南（附已经配置好的版本）-CSDN博客</a></li><li><a href="https://sspai.com/post/73061">抛弃 Lastpass，拥抱 KeePass-免费开源的绿色密码管理软件 - 少数派</a></li><li><a href="https://www.rmnof.com/article/keepass-auto-type-with-keepassnatmsg-keepassxc-browser/">KeePass通过KeePassNatMsg和KeePassXC-Browser实现Chrome&#x2F;FireFox&#x2F;Edge自动填充</a></li><li><a href="https://post.smzdm.com/p/am8emx34/">KeePass密码管理器傻瓜指南（一）_软件应用_什么值得买</a></li></ul><h1 id="Cx-File-Explorer"><a href="#Cx-File-Explorer" class="headerlink" title="Cx File Explorer"></a>Cx File Explorer</h1><p><a href="https://www.kungal.com/topic/805">[教程]使用Cx File Explorer实现安卓手机与电脑局域网文件共享 - KUN Visual Novel Forum</a></p><h1 id="文件挂载"><a href="#文件挂载" class="headerlink" title="文件挂载"></a>文件挂载</h1><p><a href="https://mp.weixin.qq.com/s/eQb3pKui8z6n6Ok6aKdeLA">Windows将webdav服务器映射成本地磁盘的方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker安装和使用</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/docker%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/docker%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Desktop"><a href="#Docker-Desktop" class="headerlink" title="Docker Desktop"></a>Docker Desktop</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>平时要使用 Docker 不想安装虚拟机，也不想买服务器时推荐安装官方提供的「Docker Desktop」</p><p>1、官网下载安装包</p><p>2、修改默认安装位置</p><p>默认是安装在 C 盘中的并且无法修改，后续下载一些镜像时也会存放在 C 盘，我这里通过「mklink 创建软链接」的方式，将文件映射到我的 D 盘中，先在 D 盘创建好如下四个目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir D:\Docker  </span><br><span class="line">mkdir D:\Docker\Local  </span><br><span class="line">mkdir D:\Docker\Roaming\Docker  </span><br><span class="line">mkdir D:\Docker\Roaming\Docker Desktop</span><br></pre></td></tr></table></figure><p>然后以管理员身份打开 cmd，在打开的 cmd 窗口中依次执行下面四个 <code>mklink</code> 命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mklink /j &quot;C:\Program Files\Docker&quot; &quot;D:\Docker&quot;</span><br><span class="line">mklink /j &quot;C:\Users\ICEFJL\AppData\Local\Docker&quot; &quot;D:\Docker\Local&quot;</span><br><span class="line">mklink /j &quot;C:\Users\ICEFJL\AppData\Roaming\Docker&quot; &quot;D:\Docker\Roaming\Docker&quot;</span><br><span class="line">mklink /j &quot;C:\Users\ICEFJL\AppData\Roaming\Docker Desktop&quot; &quot;D:\Docker\Roaming\Docker Desktop&quot;</span><br></pre></td></tr></table></figure><p>3、安装<br><img src="/../../../img/blog/f032a04751de9c7da78e303776aac9ce_MD5.png" alt="图片"><img src="/../../../img/blog/6aa10763fea03299263663fbe4460bbc_MD5.png" alt="图片"> Accept 后出现以下弹窗：Docker Desktop 需要更新的 WSL 内核版本。通过运行 “wsl –update” 更新 WSL 内核</p><h2 id="更改镜像下载源"><a href="#更改镜像下载源" class="headerlink" title="更改镜像下载源"></a>更改镜像下载源</h2><p><img src="/../../../img/blog/d823d802503de776664e32fb0f187ec7_MD5.png" alt="图片">复制以下代码覆盖掉要更改部分，重启 Docker Desktop 即可，<strong>「registry-mirrors」</strong>配的都是国内的一些镜像源</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;builder&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;defaultKeepStorage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20GB&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;experimental&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;buildkit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://cr.console.aliyun.com/&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/../../../../img/blog/32d5b77b0cd97dfac76c81cb51e332f0_MD5.png" alt="图片"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/ErDeO9e1aaOIRMkfnfXU7Q">Windows中也可以安装使用Docker (qq.com)</a></p><h1 id="Docker-学习"><a href="#Docker-学习" class="headerlink" title="Docker 学习"></a>Docker 学习</h1><p><a href="https://yeasy.gitbook.io/docker_practice/">前言 - Docker — 从入门到实践 (gitbook.io)</a></p><h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h1><p><a href="https://www.runoob.com/docker/ubuntu-docker-install.html">Ubuntu Docker 安装 | 菜鸟教程 (runoob.com)</a><br>linux&#x2F;ubuntu 下的安装命令 (使用阿里云镜像)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common &amp;&amp; curl -fsSL https:``//download``.[docker.com](http://docker.com/)``/linux/ubuntu/gpg | sudo apt-key add - &amp;&amp; sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] [http://mirrors.aliyun.com/docker-ce/linux/ubuntu](http://mirrors.aliyun.com/docker-ce/linux/ubuntu) <span class="subst">$(lsb_release -cs)</span> stable&quot;</span> &amp;&amp; sudo apt-get update &amp;&amp; sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><p>一条命令就可以搞定安装，不过安装可能需要一些时间，等着就行。</p><p>在使用过程中，当需要查找某个镜像的时候，我们可以去 docker 中央仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a>  查看，从中我们可以看到该名称镜像历史的 release 的版本，我们可以根据需求选择自己需要的版本。</p><h1 id="Docker-常用管理命令"><a href="#Docker-常用管理命令" class="headerlink" title="Docker 常用管理命令"></a>Docker 常用管理命令</h1><p><a href="https://www.runoob.com/docker/docker-command-manual.html">Docker 命令大全 | 菜鸟教程 (runoob.com)</a><br>service docker start # 启动 docker 服务器</p><p>(1) 拉取某个镜像</p><p><code>docker pull xxxx</code></p><p>(2) 查看镜像与删除镜像</p><p>查看所有镜像：<code>docker images</code></p><p>删除镜像 ：<code>docker rmi xxxx</code></p><p>注意：删除镜像前必须先停用、删除该镜像产生的实例</p><p>(3) 查看与删除实例</p><p>查看所有实例：<code>docker ps -a</code></p><p>查看 activate 实例：<code>docker ps</code></p><p>删除实例：<code>docker rm xxx</code></p><p>(4) 根据镜像创造 docker 实例,这里以 nginx 为例</p><p><code>docker run --name nginx -p 80:80 -v /root/docker_conf/nginx/nginx.conf:/etc/nginx/nginx.conf -d docker.io/nginx</code></p><p>其中: -name 是镜像的名称,  -p 是端口映射, -v 是绑定一个卷, 我们可以把自己的文件目录映射到镜像内部目录, 冒号前面为自己的实际机器, : 后面是对应镜像的目录。</p><p>(5) 当 docker 启动失败的时候 debug 原因：</p><p><code>docker logs xxID</code></p><p>(6) 进入实例</p><p>根据上面的命令创建的实例之后，如果成功的话会默认启动实例，我们可以使用下列命令进入到该实例内部：</p><p><code>docker exec -it nginx bash</code></p><p><code>docker run -it --rm ubuntu /bin/bash</code>    运行存在的镜像，并以交互的方式进入容器，运行完删除容器</p><p>(7) 复制文件到实例内部系统</p><p><code>docker cp my.cnf mysql5.7:/etc/mysql/my.cnf</code></p><p>把宿主机文件拷到容器里面<br><code>docker cp 要拷贝的文件路径 容器名: 要拷贝到容器里面对应的路径</code></p><p>容器里面拷文件到主机<br><code>docker cp 容器名: 要拷贝的文件在容器中的路径 要拷贝到宿主机器的响应路径</code></p><p>(8)  实例内系统安装软件</p><p>实例内也是一个操作系统，我们可以安装需要使用的程序：</p><p><code>apt update</code></p><p>例如安装 vim 命令 :  <code>apt install vim</code></p><p>(9) 停止,启动,重新启动 docker 实例</p><p><code>docker start/stop/restart xxx</code></p><p>(10)  卸载 docker</p><p><code>yum remove docker-ce</code></p><p>删除镜像、容器、配置文件等内容：</p><p><code>rm -rf /var/lib/docker</code></p><h2 id="Docker-资源管理命令"><a href="#Docker-资源管理命令" class="headerlink" title="Docker 资源管理命令"></a>Docker 资源管理命令</h2><p>docker 镜像在很多时候会耗占比较多的内存和 cpu, 甚至某个镜像被用来挖矿的情况下, cpu 会达到 100%(都是血与泪的实践经历啊)， 所以我们可以使用下面的命令来限制性设置某个实例的内存与 cpu 占用量。</p><p>(1) docker 各个镜像资源使用情况查看 (包括 cpu 和内存)：</p><p><code>docker stats</code></p><p>(2)  限制 docker 内存</p><p><code>docker update -m 20M --memory-reservation 20M --memory-swap 20M nginx</code></p><p>（3）限制 docker cpu</p><p><code>docker update --cpu-period=100000 --cpu-quota=20000 nginx</code></p><p>在每 100 毫秒的时间里，运行进程使用的 CPU 时间最多为 20 毫秒，这里仅仅考虑百分比。</p><h1 id="Docker-镜像文件保存与加载"><a href="#Docker-镜像文件保存与加载" class="headerlink" title="Docker 镜像文件保存与加载"></a>Docker 镜像文件保存与加载</h1><p>(1) 保存 docker 镜像文件到本地：</p><p><code>docker save nginx &gt;./nginx.tar</code></p><p>(2)  在另一台主机加载本地文件到镜像 ：</p><p><code>docker load &lt; nginx.tar</code></p><p>然后看 docker images ，就能看到该镜像 ，但是名字和标签都是 none</p><p>（3）执行完上述语句后，查看本地镜像，会看到新加载的镜像名字和标签都是 none，利用该镜像的 id 对名字和标签重新命名即可：</p><p><code>指令：docker tag 镜像id 镜像名:标签      docker tag 172825a55619 confluence6.12_cracked:0.1   </code></p><p>(4) 启动镜像</p><p><code>docker run -it --name nginx 172825a55619 /bin/bash</code></p><h1 id="Docker-镜像文件的提交与上传到中央仓库"><a href="#Docker-镜像文件的提交与上传到中央仓库" class="headerlink" title="Docker 镜像文件的提交与上传到中央仓库"></a>Docker 镜像文件的提交与上传到中央仓库</h1><p>很多时候，我们会需要在已有的镜像上进行一些自定义修改，然后重新打包上传自己的镜像供别人使用，我们可以使用下面的流程来上传自己新打包的镜像到中央仓库。</p><p>(5.1)  官网账号注册</p><p>首先我们先到 docker 官网注册一个账号，这样我们才能将制作好的镜像上传到 docker 仓库，</p><p>打开 <code>https://hub.docker.com/</code></p><p>(5.2) 提交自己要上传的镜像</p><p><code>docker commit Container_name yourdockerhub/nginx:latest</code></p><p>注意：commit 对包名命名有要求，Container_name 容器名称,yourdockerhub 改成自己的账号，否则无法上传</p><p>(5.3)  登录到远程 docker 仓库 (输入自己注册的账号和密码)</p><p><code>docker login</code></p><p>(5.4)  上传至 docker 云端</p><p><code>docker push yourdockerhub/nginx:latest</code><br>注意: 这里 push 对包名命名有要求，yourdockerhub 改成自己的账号，否则无法上传 上传成功了就可以在中央仓库你的账号下搜到你刚上传的镜像了。</p>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL配置</title>
      <link href="/posts/%E8%A7%A3%E5%86%B3/WSL%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E8%A7%A3%E5%86%B3/WSL%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="WSL2-优化"><a href="#WSL2-优化" class="headerlink" title="WSL2 优化"></a>WSL2 优化</h1><h2 id="搬迁"><a href="#搬迁" class="headerlink" title="搬迁"></a>搬迁</h2><p><a href="https://blog.csdn.net/u014175785/article/details/118181230">[WSL2]WSL2迁移虚拟磁盘文件ext4.vhdx_wsl ext4.vhdx-CSDN博客</a></p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><p>随着使用时间的延长，WSL2 占用的硬盘空间会越来越多，这个时候就需要对其文件进行压缩。方法如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--shutdown</span></span><br><span class="line">diskpart</span><br><span class="line"><span class="comment"># open window Diskpart</span></span><br><span class="line"><span class="built_in">select</span> vdisk file=<span class="string">&quot;C:\Users\Ci\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\LocalState\ext4.vhdx&quot;</span></span><br><span class="line"><span class="comment"># select vdisk file=&quot;C:\Users\Ci\AppData\Local\Packages\KaliLinux.54290C8133FEE_ey8k8hqnwqnmg\LocalState\ext4.vhdx&quot;</span></span><br><span class="line">attach vdisk readonly</span><br><span class="line">compact vdisk</span><br><span class="line">detach vdisk</span><br></pre></td></tr></table></figure><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>当然，WSL2 也会带来内存占用的问题，可以打开 <code>$home/.wslconfig</code>，进行如下设置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">wsl2</span>]</span><br><span class="line">memory=<span class="number">4</span>GB</span><br><span class="line">swap=<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="WSL-systemd"><a href="#WSL-systemd" class="headerlink" title="WSL_systemd"></a>WSL_systemd</h1><p>安装好新版 wsl 后，通过以下命令来配置 wsl 启用 systemd:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;[boot]\nsystemd=true&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/wsl.conf</span><br></pre></td></tr></table></figure><p>配置后需要通过 <code>wsl --shutdown</code> 命令关闭 wsl，来进行 wsl 的完整重启。</p><h2 id="如何判断-Systemd-是否启用成功"><a href="#如何判断-Systemd-是否启用成功" class="headerlink" title="如何判断 Systemd 是否启用成功"></a>如何判断 Systemd 是否启用成功</h2><p>判断 wsl 是否已启用 systemd，可通过以下命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps --no-headers -o <span class="built_in">comm</span> 1</span><br></pre></td></tr></table></figure><p>如果命令返回的是 <code>init</code> 说明 systemd 未启用，如果是 <code>systemd</code> 那么你的 systemd 已启用成功了。</p><h2 id="查看已启用的-Systemd-Service"><a href="#查看已启用的-Systemd-Service" class="headerlink" title="查看已启用的 Systemd Service"></a>查看已启用的 Systemd Service</h2><p>通过 systemctl 的 list-units、list-unit-files 命令，都可以很好的查看目前的 systemd 状态，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --<span class="built_in">type</span>=service</span><br><span class="line">systemctl list-unit-files --<span class="built_in">type</span>=service --state=enabled</span><br></pre></td></tr></table></figure><h2 id="解决-Exec-Exec-Format-Error"><a href="#解决-Exec-Exec-Format-Error" class="headerlink" title="解决 Exec: Exec Format Error"></a>解决 Exec: Exec Format Error</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c &#x27;echo :WSLInterop:M::MZ::/init:PF &gt; /usr/lib/binfmt.d/WSLInterop.conf&#x27;</span><br></pre></td></tr></table></figure><p>After <code>wsl --shutdown</code> and logging back in, now next to systemd, <code>explorer.exe</code> and the like are finally working again!<br><a href="https://github.com/microsoft/WSL/issues/8843">[WSL2][systemd][interop] Unable to Execute Windows Binary when systemd enabled · Issue #8843 · microsoft&#x2F;WSL (github.com)</a></p><h2 id="启用-Systemd-支持后无法从-Wsl2-运行-Exe"><a href="#启用-Systemd-支持后无法从-Wsl2-运行-Exe" class="headerlink" title="启用 Systemd 支持后无法从 Wsl2 运行 Exe"></a>启用 Systemd 支持后无法从 Wsl2 运行 Exe</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-binfmts --disable cli</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题配置</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://butterfly.js.org/posts/21cfbf15/">文档地址</a><br><a href="https://fontawesome.com/icons?d=gallery">Find Icons with the Perfect Look &amp; Feel | Font Awesome</a><br>将 <code>butterfly/_config.yml</code> 文件复制，重命名为 <code>_config.butterfly.yml</code> 放在 hexo 根目录下，在这个文件里做修改<br>命令：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 上传主题，验证是否修改成功。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.yi-ting.com/2024/12/10/2024/%E6%A5%B5%E7%B0%A1%E7%9A%84%20Obsidian%20+%20Hexo%20+%20dev%20container%20+%20cloudflare%20page%20%E5%B7%A5%E4%BD%9C%E6%B5%81%20%E5%82%99%E5%BF%98%E9%8C%84/">极简的 Obsidian + Hexo + dev container + cloudflare page 工作流 备忘录 | Yi-Ting’s Blog</a></p><h1 id="主题素材"><a href="#主题素材" class="headerlink" title="主题素材"></a>主题素材</h1><h2 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h2><p>在根目录的 source 文件夹下创建 img 文件夹，包含 web 和 blog 两个文件夹，网站图片使用 <code>/img/web/xx.jpg</code>,博客图片使用 <code>![](img/blog/xx.jpg)</code>,并把 butterfly 主题文件夹下的 img 文件夹剪切到 <code>/img/web</code> 文件夹下</p><h2 id="FontAwesome-图标本地加载"><a href="#FontAwesome-图标本地加载" class="headerlink" title="FontAwesome 图标本地加载"></a>FontAwesome 图标本地加载</h2><p>由于 all.min.css 下载 woff 文件较慢所以改为本地加载<br>首先注释掉 themes\butterfly\plugins.yml 中的以下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#fontawesomeV6:</span></span><br><span class="line"><span class="comment">#   name: &#x27;@fortawesome/fontawesome-free&#x27;</span></span><br><span class="line"><span class="comment">#   file: css/all.min.css</span></span><br><span class="line"><span class="comment">#   other_name: font-awesome</span></span><br><span class="line"><span class="comment">#   version: 6.3.0</span></span><br></pre></td></tr></table></figure><p>再从 <a href="https://github.com/FortAwesome/Font-Awesome/tree/6.x">这个网站</a> 下载 css&#x2F;all.min.css 和 webfonts 文件夹<br>下载好后将 all.min.css 拷贝到 themes\butterfly\source\css 目录中,将 webfonts 文件夹拷贝到 themes\butterfly\source 目录中<br>最后引入 css</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/all.min.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>使用阿里图标与此类似 <a href="https://www.cnblogs.com/MoYu-zc/p/14399186.html">Hexo-使用阿里iconfont图标 - MoYu-zc - 博客园 (cnblogs.com)</a></p><h2 id="解决-cdn-jsdelivr-net-国内无法加载"><a href="#解决-cdn-jsdelivr-net-国内无法加载" class="headerlink" title="解决 cdn.jsdelivr.net 国内无法加载"></a>解决 cdn.jsdelivr.net 国内无法加载</h2><p>使用 <code>cdn.jsdelivr.net</code> 未受污染的子域：</p><ul><li><code>fastly.jsdelivr.net</code>，由 Fastly 提供 本站使用</li><li><code>gcore.jsdelivr.net</code>，由 G-Core 提供</li><li><code>testingcf.jsdelivr.net</code>，由 CloudFlare 提供<br>将博客主题的文件中 jsDelivr 链接里的 <code>cdn</code> 替换为子域名即可</li></ul><blockquote><p>比如 butterfly 主题中将 <code>themes\butterfly\layout\includes\head\preconnect.pug</code> 和 <code>themes\butterfly\scripts\events\cdn.js</code> 中的 <code>cdn.jsdelivr.net</code> 替换为 <code>fastly.jsdelivr.net</code></p></blockquote><h2 id="查看网页加载的大小和时间"><a href="#查看网页加载的大小和时间" class="headerlink" title="查看网页加载的大小和时间"></a>查看网页加载的大小和时间</h2><ol><li><p>右键点击网页，选择 “ 检查 “，(直接按 ctrl+shift+I 也可以）。</p></li><li><p>出来的界面上，点击 “Network”，按 Ctrl+R，就可以看到每个资源的大小和加载时间</p></li><li><p>进一步分析：点击特定请求，可以查看更详细的信息，如请求头、响应头、传输大小等。通过分析这些信息，你可以确定加载时间较长的资源，并找出导致问题的原因。</p></li></ol><h2 id="外挂-Css"><a href="#外挂-Css" class="headerlink" title="外挂 Css"></a>外挂 Css</h2><p>在 themes\butterfly\source\css 目录中添加 my.css,添加需要的 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">73</span>, <span class="number">177</span>, <span class="number">245</span>, <span class="number">0.2</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(<span class="number">45deg</span>,</span><br><span class="line">            <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">25%</span>,</span><br><span class="line">            transparent <span class="number">25%</span>,</span><br><span class="line">            transparent <span class="number">50%</span>,</span><br><span class="line">            <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span>,</span><br><span class="line">            <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">75%</span>,</span><br><span class="line">            transparent <span class="number">75%</span>,</span><br><span class="line">            transparent);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* a标签默认颜色 */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 鼠标悬停时的颜色 */</span></span><br><span class="line"><span class="comment">/* #article-container a:hover &#123;</span></span><br><span class="line"><span class="comment">    color: #e58a8a;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*a标签颜色*/</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后引入 css</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/my.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="分割线图标更换"><a href="#分割线图标更换" class="headerlink" title="分割线图标更换"></a>分割线图标更换</h2><p>本次修改基于 Butterfly 主题 3.0.0 ！<br>将图标更换为 “ 太空飞船 “。<br>修改 butterfly 主题配置文件 <code>_data</code>–<code>_config.yml</code> ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hr_icon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">&#x27;\f197&#x27;</span> <span class="comment"># the unicode value of Font Awesome icon</span></span><br><span class="line">  <span class="attr">icon-top:</span> <span class="string">-10px</span></span><br></pre></td></tr></table></figure><p><code>icon-top</code> 常用数值：</p><p>-20px：图标位于分割线上方<br>-10px：图标位于分割线中间<br>0px：图标位于分割线下方</p><h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><p>安装 hexo-generator-searchdb 搜索插件</p><p>修改配置文件：</p><p>找到 local_search 将 enable 修改为 true</p><h2 id="加速方案"><a href="#加速方案" class="headerlink" title="加速方案"></a>加速方案</h2><h3 id="减少索引内容"><a href="#减少索引内容" class="headerlink" title="减少索引内容"></a>减少索引内容</h3><ul><li>可以设置搜索内容，若仅搜索标题 （搜索内容 content 设置为 false） 则会加载快到飞起<br><img src="/../../../../img/blog/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-2.png"></li></ul><h3 id="外链加速"><a href="#外链加速" class="headerlink" title="外链加速"></a>外链加速</h3><p>打开主题下的 local-search.js 文件 (不同主题的位置会不同, 但是一般都在 source&#x2F;js 这种文件夹里) , 找到如下字段</p><p><code>url: GLOBAL_CONFIG.root + path</code> 改成 <code>url: 外链</code><br>外链推荐使用 Jsdelivr 的 cdn (引用 Github 的资源, 不需要手动更新, 速度也挺快)</p><h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><h2 id="使用-Valine-添加评论功能"><a href="#使用-Valine-添加评论功能" class="headerlink" title="使用 Valine 添加评论功能"></a>使用 Valine 添加评论功能</h2><ol><li><p>注册账号并进入：<a href="https://leancloud.cn/dashboard/login.html#/signin">LeanCloud</a></p></li><li><p>创建开发版应用：</p></li><li><p>创建后点击设置进入应用：</p></li><li><p>复制 AppID、AppKey</p></li><li><p>修改主题配置文件<br>找到 valine，分别将复制的 id 和 key 填入,开启评论需要在 comments-use 中填写你需要的评论。</p></li></ol><h2 id="Giscus-评论系统设置"><a href="#Giscus-评论系统设置" class="headerlink" title="Giscus 评论系统设置"></a>Giscus 评论系统设置</h2><h3 id="安装-Giscus"><a href="#安装-Giscus" class="headerlink" title="安装 Giscus"></a>安装 Giscus</h3><p>点击这个链接安装：**<a href="https://github.com/apps/giscus">GitHub Apps - giscus</a>**</p><h3 id="配置仓库-Discuss-部分"><a href="#配置仓库-Discuss-部分" class="headerlink" title="配置仓库 Discuss 部分"></a>配置仓库 Discuss 部分</h3><p>首先打开仓库的 setting，将 Discussions 部分打上对号，然后建立一个 Announcements 的分类</p><h3 id="进入-Giscus-配置"><a href="#进入-Giscus-配置" class="headerlink" title="进入 Giscus 配置"></a>进入 Giscus 配置</h3><p>链接在这：**<a href="https://link.zhihu.com/?target=https://giscus.app/zh-CN">giscus</a>**</p><p>配置完仓库和 discussion 分类后，可以在启动 giscus 下边复制几个东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repo:</span><br><span class="line">repo_id:</span><br><span class="line">category_id:</span><br></pre></td></tr></table></figure><p>还可根据自己的需要在 option 中添加对应的选项，按照 yaml 格式填入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data-strict:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">data-lang:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">data-input-position:</span> <span class="string">top</span></span><br><span class="line"><span class="attr">data-loading:</span> <span class="string">lazy</span></span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在 Hexo 中，评论功能默认在所有页面都开启，如果部分页面我们不需要评论功能，例如分类、标记页面。我们可以在在站点根目录下 <code>/source/页面名称/index.md</code> 中通过 <code>comments</code> 属性设置 <code>true</code> 或 <code>false</code> 控制该页面或者是文章的评论功能是否打开</p><h1 id="收录谷歌、百度"><a href="#收录谷歌、百度" class="headerlink" title="收录谷歌、百度"></a>收录谷歌、百度</h1><p>1、 查看收录情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">地址栏输入：site:xingjiahui.top</span><br></pre></td></tr></table></figure><p>2、验证、提交网站：<a href="https://www.ancii.com/avcwpl4d6/">JingLisen</a></p><h1 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h1><p><a href="https://www.xiaowu95.wang/posts/80027c66/">记录hexo整合pwa的使用 | 小五的个人杂货铺 (xiaowu95.wang)</a><br><a href="https://butterfly.js.org/posts/ceeb73f/#PWA">Butterfly 安裝文檔(四) 主題配置-2 | Butterfly</a></p><h1 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h1><p>百度主动提交链接</p><p>1、首先，在 Hexo 根目录下，安装本插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>2、然后在根目录下，把以下内容配置到 _config.yml 文件中:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://gitee.com/youthlql/youthlql.git</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/youthlql/youthlql.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span></span><br><span class="line"><span class="comment"># 百度主动推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">100</span> <span class="comment">## 提交最新的一个链接</span></span><br><span class="line">  <span class="attr">host:</span>  <span class="comment">## 在百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span>  <span class="comment">## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment">## 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure><p>我把 deploy 配置也贴出来是因为有两个 type，注意用 - 区分</p><p>百度其它的 seo 到他的官网看文档就行</p><h1 id="查看网页-RSS"><a href="#查看网页-RSS" class="headerlink" title="查看网页 RSS"></a>查看网页 RSS</h1><p>本次修改基于 Butterfly 主题 3.0.0 ！</p><p>实现：增加社交图标 RSS，点击可查看网页 RSS。</p><p>1.下载插件 hexo-generator-feed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>2.在 hexo 的主配置文件 _config.yml 中任意位置添加以下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure><p>3.修改 butterfly 主题配置文件 _config.yml ，添加 RSS 的图标：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fa fa-rss:</span> <span class="string">/atom.xml</span> <span class="string">||</span> <span class="string">RSS链接</span></span><br></pre></td></tr></table></figure><h1 id="社交信息设置"><a href="#社交信息设置" class="headerlink" title="社交信息设置"></a>社交信息设置</h1><p>在 <code>\source\_data</code> 中的 <code>butterfly.yml</code> 修改 <code>social</code>：</p><p>(可以选择使用 <code>fa fa-xxx</code> 图标，也可以选择使用 <code>阿里iconfont</code> 图标)</p><p>此处要注意：</p><p>​ 很多人不知道自己上方填的网址怎么找</p><p>​ <code>RSS</code> 上面有教程，<code>Giuhub</code>、<code>Github</code>、<code>CSDN</code>、<code>bilibili</code> 直接 <code>个人主页</code> 网址就可以</p><p>​ <code>QQ</code>：下方 xxxxxxx 填上对应的 <code>qq号码</code> 即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=xxxxxxx&amp;website=www.oicqzone.com</span><br></pre></td></tr></table></figure><h1 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h1><p>有时浏览器会缓存旧的链接或搜索结果，无法加载更新后的结果，可使用使用 Ctrl + F5 强制刷新页面，或清除缓存并刷新页面，如缓存图片和文件。</p>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp环境搭建</title>
      <link href="/posts/%E7%BC%96%E7%A8%8B/Cpp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
      <url>/posts/%E7%BC%96%E7%A8%8B/Cpp%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</url>
      
        <content type="html"><![CDATA[<h1 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h1><h2 id="msvc"><a href="#msvc" class="headerlink" title="msvc"></a>msvc</h2><p><a href="https://visualstudio.microsoft.com/zh-hans/visual-cpp-build-tools/">Microsoft C++ 生成工具 - Visual Studio</a></p><h2 id="MinGW"><a href="#MinGW" class="headerlink" title="MinGW"></a>MinGW</h2><p>首先使用 scoop 安装 msys2（在 main bucket 中就有）：<br><code>scoop install mingw </code></p><h2 id="Clangd"><a href="#Clangd" class="headerlink" title="Clangd"></a>Clangd</h2><p>在 vscode 扩展商店中搜索 clangd 下载，完成后右下角会弹窗提醒你安装 clangd server，点击 Install 即可直接安装，这一点非常便捷。</p><h3 id="自身配置"><a href="#自身配置" class="headerlink" title="自身配置"></a>自身配置</h3><p><a href="https://clangd.llvm.org/config">Configuration (llvm.org)</a><br><a href="https://github.com/clangd/clangd/discussions/1170">为什么 windows 上的 clangd 找不到标准头文件</a><br><a href="https://github.com/clangd/clangd/discussions/1510">clangd 找不到 iostream 和其他标准库</a><br><a href="https://github.com/clangd/clangd/discussions/1573">msvc with clangd · clangd&#x2F;clangd · Discussion #1573 (github.com)</a><br><code>&lt;driver&gt; -E -v -x c++ -</code> 查看是否支持 clangd 用于尝试从驱动程序中提取内置包含的相同标志</p><ol><li><p>在工程目录下新建一个<strong>文件</strong>，名为 <code>.clangd</code>，或者编辑 <code>%LocalAppData%\clangd\config.yaml</code>, 通常为 <code>C:\Users\Bob\AppData\Local\clangd\config.yaml</code></p></li><li><p>在文件中添加</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CompileFlags:</span></span><br><span class="line">  <span class="attr">Add:</span> [<span class="string">&quot;-IC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\include&quot;</span>]<span class="comment">#添加头文件</span></span><br><span class="line"><span class="attr">Diagnostics:</span></span><br><span class="line">  <span class="attr">UnusedIncludes:</span> <span class="string">Strict</span></span><br><span class="line">  <span class="attr">ClangTidy:</span></span><br><span class="line">    <span class="attr">Add:</span></span><br><span class="line">      [</span><br><span class="line">        <span class="string">performance-*</span>,</span><br><span class="line">        <span class="string">bugprone-*</span>,</span><br><span class="line">        <span class="string">portability-*</span>,</span><br><span class="line">        <span class="string">modernize-*</span>,</span><br><span class="line">      ]</span><br><span class="line">    <span class="attr">Remove:</span> <span class="string">modernize-use-trailing-return-type</span></span><br><span class="line">    <span class="attr">CheckOptions:</span></span><br><span class="line">      <span class="attr">WarnOnFloatingPointNarrowingConversion:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="Mingw"><a href="#Mingw" class="headerlink" title="Mingw"></a>Mingw</h3><p>clangd 默认直接绑定了 VS 路径下的 MSVC 库，如果需要修改为 MinGW 则要改动 target。<br>配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********</span></span><br><span class="line"><span class="comment">* Clangd *</span></span><br><span class="line"><span class="comment">**********/</span></span><br><span class="line"><span class="comment">// Clangd 运行参数(在终端/命令行输入 clangd --help-list-hidden 可查看更多)</span></span><br><span class="line"><span class="attr">&quot;clangd.arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//设置clangd server的驱动库路径，这里我设置了mingw的路径，但似乎没有效果（clangd仍然链接到了MSVC当中）</span></span><br><span class="line">  <span class="string">&quot;--query-driver=D:\\Scoop\\apps\\msys2\\current\\mingw64\\bin\\x86_64-w64-mingw32-g++.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">   </span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// clangd所在路径</span></span><br><span class="line"><span class="attr">&quot;clangd.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Scoop\\apps\\llvm\\current\\bin\\clangd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 默认编译器选项：在 clangd 没能找到 compile_flags.json 文件时采用</span></span><br><span class="line"><span class="comment">// 缺陷是不能如读取到 compile_flags.json 时一样直接索引同一项目的不同文件，因为没有它 clangd 仅能保守地分析</span></span><br><span class="line"><span class="comment">//系统头文件、当前文件、当前文件`#include`的文件</span></span><br><span class="line"><span class="comment">// compile_flags.json 可通过 CMake 等工具生成</span></span><br><span class="line"><span class="attr">&quot;clangd.fallbackFlags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//包含头文件</span></span><br><span class="line">  <span class="string">&quot;-ID:\\Scoop\\apps\\msys2\\current\\mingw64\\include\\c++\\12.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-ID:\\Scoop\\apps\\msys2\\current\\mingw64\\include&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-ID:\\Scoop\\apps\\msys2\\current\\mingw64\\include\\c++\\12.2.0\\x86_64-w64-mingw32&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-I$&#123;workspaceFolder&#125;/src/includes&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//设置链接目标，这里改成了GNU，即对应MinGW</span></span><br><span class="line">  <span class="string">&quot;--target=x86_64-w64-windows-gnu&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>逐一解释：</p><ul><li>header-insetion: 是否自动引入头文件，这里设置的是从不。</li><li>completion-style: 设置提示格式，这里设置的是展示所有细节。</li><li>query-driver：设置 clangd server 的驱动库路径，这里我设置了 mingw 的路径，但似乎没有效果（clangd 仍然链接到了 MSVC 当中）</li><li>std：设置 c++ 标准</li><li>-I：设置用户自定义的库路径</li><li>–target：设置链接目标，这里改成了 GNU，即对应 MinGW</li></ul><h3 id="Msvc"><a href="#Msvc" class="headerlink" title="Msvc"></a>Msvc</h3><p>msvc 编译器较快（推荐）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********</span></span><br><span class="line"><span class="comment"> * Clangd *</span></span><br><span class="line"><span class="comment"> **********/</span></span><br><span class="line"><span class="comment">// Clangd 运行参数(在终端/命令行输入 clangd --help-list-hidden 可查看更多)</span></span><br><span class="line"><span class="attr">&quot;clangd.arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//设置clangd server的驱动库路径</span></span><br><span class="line">  <span class="string">&quot;--query-driver=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\bin\\HostX64\\x64\\cl.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// clangd所在路径</span></span><br><span class="line"><span class="attr">&quot;clangd.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Scoop\\apps\\llvm\\current\\bin\\clangd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 默认编译器选项：在 clangd 没能找到 compile_flags.json 文件时采用</span></span><br><span class="line"><span class="comment">// 缺陷是不能如读取到 compile_flags.json 时一样直接索引同一项目的不同文件，因为没有它 clangd 仅能保守地分析</span></span><br><span class="line"><span class="comment">//系统头文件、当前文件、当前文件`#include`的文件</span></span><br><span class="line"><span class="comment">// compile_flags.json 可通过 CMake 等工具生成</span></span><br><span class="line"><span class="attr">&quot;clangd.fallbackFlags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="comment">//包含头文件</span></span><br><span class="line">  <span class="string">&quot;-IC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.34.31933\\include&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;-I$&#123;workspaceFolder&#125;/src/includes&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="Xmake"><a href="#Xmake" class="headerlink" title="Xmake"></a>Xmake</h2><p>设置工具链：<br><code>xmake f -p mingw --mingw=D:\Scoop\apps\msys2\current\mingw64  -c</code><br>贴一段 xmake 的配置代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add_rules(<span class="string">&quot;mode.debug&quot;</span>, <span class="string">&quot;mode.release&quot;</span>)</span><br><span class="line">set_languages(<span class="string">&quot;c11&quot;</span>,<span class="string">&quot;cxx11&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target(<span class="string">&quot;P2_6_1&quot;</span>)</span><br><span class="line">set_kind(<span class="string">&quot;binary&quot;</span>)</span><br><span class="line">add_files(<span class="string">&quot;src/chapter2/practice_2_6_1.cpp&quot;</span>)</span><br><span class="line">add_includedirs(<span class="string">&quot;src/includes&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>通过 <a href="https://github.com/xmake-io/xmake-vscode">xmake-vscode</a> 插件配合 vscode 来实现对 c&#x2F;c++ 项目的断点调试支持。<br>另外我们还需要依赖 vscode 的 C++ 插件才能进行调试支持</p><h1 id="使用-WSL-在-VScode-上用-LLVM-Clangd-LLDB-高效编程-C"><a href="#使用-WSL-在-VScode-上用-LLVM-Clangd-LLDB-高效编程-C" class="headerlink" title="使用 WSL 在 VScode 上用 LLVM + Clangd + LLDB 高效编程 C++"></a>使用 WSL 在 VScode 上用 LLVM + Clangd + LLDB 高效编程 C++</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>想要在 <a href="https://so.csdn.net/so/search?q=VScode&spm=1001.2101.3001.7020">VScode</a> 上使用 clang 编译 + LLDB 调试 + clangd 自动补全这一套工具链。</p><h2 id="安装工具链"><a href="#安装工具链" class="headerlink" title="安装工具链"></a>安装工具链</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install clang clangd llvm liblldb-dev </span><br></pre></td></tr></table></figure><h2 id="配置-VScode"><a href="#配置-VScode" class="headerlink" title="配置 VScode"></a>配置 VScode</h2><h3 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h3><p>按下 Ctrl+Shift+P，输入 setting(设置)，找到 WSL 的选项<br>粘贴以下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;clangd.arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;--compile-commands-dir=$&#123;workspaceFolder&#125;/build&quot;</span><span class="punctuation">,</span><span class="comment">//指定配置文件compelie_commands.json所在目录，这里有三种方法生成</span></span><br><span class="line">        <span class="comment">// 在后台自动分析文件（基于complie_commands)</span></span><br><span class="line">        <span class="string">&quot;--background-index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 同时开启的任务数量</span></span><br><span class="line">        <span class="string">&quot;-j=12&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// &quot;--folding-ranges&quot;</span></span><br><span class="line">        <span class="comment">// 告诉clangd用那个clang进行编译，路径参考which clang++的路径</span></span><br><span class="line">        <span class="string">&quot;--query-driver=/usr/bin/clang++&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// clang-tidy功能</span></span><br><span class="line">        <span class="string">&quot;--clang-tidy&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--clang-tidy-checks=performance-*,bugprone-*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 全局补全（会自动补充头文件）</span></span><br><span class="line">        <span class="string">&quot;--all-scopes-completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 更详细的补全内容</span></span><br><span class="line">        <span class="string">&quot;--completion-style=detailed&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;--function-arg-placeholders&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 补充头文件的形式</span></span><br><span class="line">        <span class="string">&quot;--header-insertion=iwyu&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// pch优化的位置</span></span><br><span class="line">        <span class="string">&quot;--pch-storage=memory&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="生成-Clangd-配置文件"><a href="#生成-Clangd-配置文件" class="headerlink" title="生成 Clangd 配置文件"></a>生成 Clangd 配置文件</h3><p>clangd 对每个项目都需要生成一个名为 compile_commands.json 的配置文件，参见 <a href="https://_clang.llvm.org_docs_jsoncompilationdatabase/">官方文档</a></p><h3 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h3><p>通过 <a href="https://github.com/xmake-io/xmake-vscode">xmake-vscode</a> 插件配合 vscode 来实现对 c&#x2F;c++ 项目的断点调试支持。<br>另外我们还需要依赖 vscode 的 C++ 插件才能进行调试支持</p><h1 id="VSCode-的-C-配置：-clang-单文件编译和-clangd-检查-可用于-macOS"><a href="#VSCode-的-C-配置：-clang-单文件编译和-clangd-检查-可用于-macOS" class="headerlink" title="VSCode 的 C++ 配置： clang++ 单文件编译和 clangd 检查 (可用于 macOS)"></a>VSCode 的 C++ 配置： clang++ 单文件编译和 clangd 检查 (可用于 macOS)</h1><h2 id="使用-clang-x2F-lldb-进行单文件编译和调试"><a href="#使用-clang-x2F-lldb-进行单文件编译和调试" class="headerlink" title="使用 clang&#x2F;lldb 进行单文件编译和调试"></a>使用 clang&#x2F;lldb 进行单文件编译和调试</h2><ol><li><p>确保 <code>clang++</code> 已经正确安装（通过 <code>clang++ -v</code> 可以验证）</p></li><li><p>vscode 已启用 CodeLLDB 插件（报错无法下载可以先按报错给的 url 用浏览器下载，然后手动安装）</p></li><li><p><strong>卸载微软提供的 C&#x2F;C++ 插件！！！也不要使用 Code Runner 插件。</strong></p></li><li><p>tasks.json，放入.vscode 文件夹中</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">    <span class="punctuation">&#123;</span>  </span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: clang++ build active file&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang++&quot;</span><span class="punctuation">,</span> <span class="comment">// `which clang++` may help you find this path  </span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">        <span class="string">&quot;--std=c++17&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;-fcolor-diagnostics&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;-fansi-escape-codes&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="string">&quot;$&#123;workspaceFolder&#125;/.build/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="string">&quot;-fstandalone-debug&quot;</span><span class="punctuation">,</span> <span class="comment">// to enable viewing std::string etc. when using lldb on Windows or Linux   </span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>  </span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>  </span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Task generated by Debugger.&quot;</span>  </span><br><span class="line">    <span class="punctuation">&#125;</span>  </span><br><span class="line">  <span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>   我的习惯是把所有的可执行文件放到 <code>./build/</code> 文件夹下，如果不这么做的话，改变 3、4 步中的文件路径，以及忽略第五步</p></blockquote><p>launch.json，放入.vscode 文件夹中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">    <span class="punctuation">&#123;</span>  </span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: clang++ build and debug active file customize&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/.build/$&#123;fileBasenameNoExtension&#125;&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: clang++ build active file&quot;</span>  </span><br><span class="line">    <span class="punctuation">&#125;</span>  </span><br><span class="line">  <span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol><li><p>在文件夹里新建一个 .build 文件夹（ macOS &#x2F; Linux 必做）</p></li><li><p>按 F 5，就可以编译调试了</p></li></ol><h2 id="使用-clangd-自动补全、代码检查"><a href="#使用-clangd-自动补全、代码检查" class="headerlink" title="使用 clangd 自动补全、代码检查"></a>使用 clangd 自动补全、代码检查</h2><ol><li><p>确保已安装 clangd（应该和 clang++ 在一个包里的，通过 <code>clangd --version</code> 检查）</p></li><li><p>安装 VScode 插件 clangd</p></li><li><p>在工作区根目录下新建一个 <code>compile_flags.txt</code>，这是用来为 clangd 指定参数的，比如使用的标准或是标准库路径之类。内容就是编译选项，一行一个。这里只写了一个标准作为例子</p></li></ol><blockquote><p>一般来说 clangd 的参数是由 compile_commands.json 指定，由 CMake 等构建工具自动生成。但是由于在我的需求中对每一个文件都是相同的编译参数，所以可以手写 compile_flags.txt 统一管理。<br>具体查看 <a href="https://clang.llvm.org/docs/JSONCompilationDatabase.html#alternatives">JSON Compilation Database Format Specification</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--std=c++17</span><br></pre></td></tr></table></figure><h2 id="关于-clang-format-文件"><a href="#关于-clang-format-文件" class="headerlink" title="关于 .clang-format 文件"></a>关于 .clang-format 文件</h2><p>我的习惯是直接放在 <code>~</code> 下（如果你的代码都放在你的~和其子文件夹里的话）<br>生成的话，官方文档的那个网页实在是太丑了，我直接选择去 CLion 里配好，然后导出为 .clang-format，既可视化又方便<br>贴一下我的.clang-format</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generated from CLion C/C++ Code Style settings  </span></span><br><span class="line"><span class="attr">BasedOnStyle:</span> <span class="string">LLVM</span>  </span><br><span class="line"><span class="attr">AccessModifierOffset:</span> <span class="number">-4</span>  </span><br><span class="line"><span class="attr">AlignAfterOpenBracket:</span> <span class="string">Align</span>  </span><br><span class="line"><span class="attr">AlignConsecutiveAssignments:</span> <span class="string">None</span>  </span><br><span class="line"><span class="attr">AlignOperands:</span> <span class="string">Align</span>  </span><br><span class="line"><span class="attr">AllowAllArgumentsOnNextLine:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">AllowAllConstructorInitializersOnNextLine:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">AllowAllParametersOfDeclarationOnNextLine:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">AllowShortBlocksOnASingleLine:</span> <span class="string">Always</span>  </span><br><span class="line"><span class="attr">AllowShortCaseLabelsOnASingleLine:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">AllowShortFunctionsOnASingleLine:</span> <span class="string">All</span>  </span><br><span class="line"><span class="attr">AllowShortIfStatementsOnASingleLine:</span> <span class="string">Always</span>  </span><br><span class="line"><span class="attr">AllowShortLambdasOnASingleLine:</span> <span class="string">All</span>  </span><br><span class="line"><span class="attr">AllowShortLoopsOnASingleLine:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">AlwaysBreakAfterReturnType:</span> <span class="string">None</span>  </span><br><span class="line"><span class="attr">AlwaysBreakTemplateDeclarations:</span> <span class="literal">Yes</span>  </span><br><span class="line"><span class="attr">BreakBeforeBraces:</span> <span class="string">Custom</span>  </span><br><span class="line"><span class="attr">BraceWrapping:</span>  </span><br><span class="line">  <span class="attr">AfterCaseLabel:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">AfterClass:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">AfterControlStatement:</span> <span class="string">Never</span>  </span><br><span class="line">  <span class="attr">AfterEnum:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">AfterFunction:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">AfterNamespace:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">AfterUnion:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">BeforeCatch:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">BeforeElse:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">IndentBraces:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">SplitEmptyFunction:</span> <span class="literal">false</span>  </span><br><span class="line">  <span class="attr">SplitEmptyRecord:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">BreakBeforeBinaryOperators:</span> <span class="string">None</span>  </span><br><span class="line"><span class="attr">BreakBeforeTernaryOperators:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">BreakConstructorInitializers:</span> <span class="string">BeforeColon</span>  </span><br><span class="line"><span class="attr">BreakInheritanceList:</span> <span class="string">BeforeColon</span>  </span><br><span class="line"><span class="attr">ColumnLimit:</span> <span class="number">0</span>  </span><br><span class="line"><span class="attr">CompactNamespaces:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">ContinuationIndentWidth:</span> <span class="number">8</span>  </span><br><span class="line"><span class="attr">IndentCaseLabels:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">IndentPPDirectives:</span> <span class="string">None</span>  </span><br><span class="line"><span class="attr">IndentWidth:</span> <span class="number">4</span>  </span><br><span class="line"><span class="attr">KeepEmptyLinesAtTheStartOfBlocks:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">MaxEmptyLinesToKeep:</span> <span class="number">2</span>  </span><br><span class="line"><span class="attr">NamespaceIndentation:</span> <span class="string">All</span>  </span><br><span class="line"><span class="attr">ObjCSpaceAfterProperty:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">ObjCSpaceBeforeProtocolList:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">PointerAlignment:</span> <span class="string">Right</span>  </span><br><span class="line"><span class="attr">ReflowComments:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpaceAfterCStyleCast:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">SpaceAfterLogicalNot:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpaceAfterTemplateKeyword:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpaceBeforeAssignmentOperators:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">SpaceBeforeCpp11BracedList:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpaceBeforeCtorInitializerColon:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">SpaceBeforeInheritanceColon:</span> <span class="literal">true</span>  </span><br><span class="line"><span class="attr">SpaceBeforeParens:</span> <span class="string">ControlStatements</span>  </span><br><span class="line"><span class="attr">SpaceBeforeRangeBasedForLoopColon:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpaceInEmptyParentheses:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpacesBeforeTrailingComments:</span> <span class="number">0</span>  </span><br><span class="line"><span class="attr">SpacesInAngles:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpacesInCStyleCastParentheses:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpacesInContainerLiterals:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpacesInParentheses:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">SpacesInSquareBrackets:</span> <span class="literal">false</span>  </span><br><span class="line"><span class="attr">TabWidth:</span> <span class="number">4</span>  </span><br><span class="line"><span class="attr">UseTab:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p><a href="https://blog.yfi.moe/post/vscode-clang-clangd/">VSCode 的 C++ 配置： clang++ 单文件编译和 clangd 检查 (可用于 macOS) | Yunfi’s Blog (yfi.moe)</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言/语言环境配置 </tag>
            
            <tag> 编程语言/cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell配置</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/shell%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/shell%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nushell"><a href="#Nushell" class="headerlink" title="Nushell"></a>Nushell</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.nushell.sh/zh-CN/book/installation.html">安装 Nu | Nushell</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><a href="https://www.nushell.sh/zh-CN/book/configuration.html">配置 | Nushell</a><br><a href="https://quadnucyard.github.io/posts/utility/nushell-vscode.html">Windows 的 Nushell 配置与 VSCode 集成（不说废话）</a><br><a href="https://blog.yusong.me/terminal/shell/nushell">https://blog.yusong.me/terminal/shell/nushell</a></p><h3 id="配置-nushell"><a href="#配置-nushell" class="headerlink" title="配置 nushell"></a>配置 nushell</h3><h4 id="不显示-banner"><a href="#不显示-banner" class="headerlink" title="不显示 banner"></a>不显示 <code>banner</code></h4><ol><li><p>运行 <code>$nu.config-path</code> 查看配置文件地址, 或你安装了 <code>neovim</code> 直接 <code>nvim $nu.config-path</code> 亦可</p></li><li><p>查找 <code>show_banner</code> 并修改为 <code>false</code></p></li></ol><h4 id="代理脚本"><a href="#代理脚本" class="headerlink" title="代理脚本"></a>代理脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias nuproxy = (let-env http_proxy = &quot;http://127.0.0.1:7890&quot; ; let-env https_proxy = &quot;http://127.0.0.1:7890&quot;)</span><br><span class="line">alias unproxy = (unlet-env http_proxy ; unlet-env https_proxy ; )</span><br></pre></td></tr></table></figure><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alias l = (ls)</span><br><span class="line">alias ll = (ls -al)</span><br><span class="line">alias c = (clear)</span><br><span class="line">alias pwd = ($env.PWD)</span><br><span class="line">def b [file] &#123;bat -p $file&#125;</span><br><span class="line">def n [file] &#123;nvim $file&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="强大的-REPL-能力"><a href="#强大的-REPL-能力" class="headerlink" title="强大的 REPL 能力"></a>强大的 REPL 能力</h3><p>作为一个 shell，尤其是一个新的 shell，上手是否简单，使用是否 easy？这一点，nushell 也可圈可点（目前版本也还有一些不足，改进之后会更好）：</p><ul><li>help 命令几乎可以涵盖你绝大部分的搜索需求。由于 nushell 中所有的指令都是以 command 的形式提供，你可以使用 help -f keyword 来搜索相关的命令。例如：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> -f remove</span><br><span class="line"><span class="built_in">help</span> -f upper</span><br></pre></td></tr></table></figure><p>在学习 nushell 之前，先了解一下它的命令集，是很有帮助的，后续也方便快速的查找。尤其是 nushell 中与 filter 相关的一系列命令，它非常类似于 Java 8&#x2F;Scala 中的一些集合 λ 函数。</p><ul><li>还算不错的调试命令，例如：</li><li>view source</li><li>scope</li><li>debug&#x2F;inspect&#x2F;explore：显示变量的值</li><li>explain&#x2F;metadata&#x2F;describe: 查看变量的元信息</li></ul><h3 id="强大的-completion-能力"><a href="#强大的-completion-能力" class="headerlink" title="强大的 completion 能力"></a>强大的 completion 能力</h3><p>nushell 自身的命令具有强大的 completion 能力，而且，它还能把这个能力扩展到外部命令之上，而且，这种扩展的实现非常简单，你也可以对你常用的工具，包装一个 completion 的能力。参考：</p><p><a href="https://link.zhihu.com/?target=https://www.nushell.sh/book/custom_completions.html">Custom completions | Nushell​www.nushell.sh/book/custom_completions.html</a></p><p>比如我引入了 <a href="https://link.zhihu.com/?target=https://github.com/nushell/nu_scripts/blob/main/custom-completions/git/git-completions.nu">https://github.com/nushell/nu_scripts&#x2F;blob&#x2F;main&#x2F;custom-completions&#x2F;git&#x2F;git-completions.nu</a> 之后，我现在使用 git 命令行，基本上就无需搜索了，感觉效率比使用 GUI 工具要提高了不少。</p><h3 id="完备的语言能力，可以编写更简单、可读、鲁棒、强大的脚本"><a href="#完备的语言能力，可以编写更简单、可读、鲁棒、强大的脚本" class="headerlink" title="完备的语言能力，可以编写更简单、可读、鲁棒、强大的脚本"></a>完备的语言能力，可以编写更简单、可读、鲁棒、强大的脚本</h3><p>nushell 自身是一个编程语言，这一点倒不奇怪（bash、zsh 等也是这样的），不过，有一些特性让 nushell 相比其他的 shell 有更为强大的编程能力：</p><ul><li>nushell 针对 completion、argument process, command help 提供了语言级的支持，现在，你只需要定义一个简单的函数，它就有了 completion、argument process 的能力。非常的优美。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run the mpp performance bench</span></span><br><span class="line">def-env main [ </span><br><span class="line"><span class="keyword">case</span>?: string@cases-list  <span class="comment"># run the given case (prefix match)</span></span><br><span class="line">--verbose <span class="comment"># show step results</span></span><br><span class="line">--list-details: bool   <span class="comment"># list all cases with sql</span></span><br><span class="line">--list-simple: bool <span class="comment"># list all cases&#x27;name</span></span><br><span class="line">] &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="variable">$list_details</span> &#123; <span class="built_in">return</span> <span class="variable">$cases</span> &#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> <span class="variable">$list_simple</span> &#123; <span class="built_in">return</span> (<span class="variable">$cases</span> | select <span class="keyword">case</span>) &#125;</span><br><span class="line"><span class="keyword">if</span> <span class="variable">$verbose</span> &#123;</span><br><span class="line"><span class="variable">$env</span>.verbose = <span class="variable">$verbose</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$case</span> == null) &#123;</span><br><span class="line"><span class="variable">$cases</span> | each &#123; |it| (compareSql <span class="variable">$it</span>.<span class="keyword">case</span> <span class="variable">$it</span>.sql) &#125; | reject sql</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$cases</span> | <span class="built_in">where</span> &#123; |it| <span class="variable">$it</span>.<span class="keyword">case</span> | str starts-with <span class="variable">$case</span> &#125;  | </span><br><span class="line">each &#123; |it| (compareSql <span class="variable">$it</span>.<span class="keyword">case</span> <span class="variable">$it</span>.sql) &#125; | reject sql</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个能力太让我开心了，几乎是零成本，就获得了显著的脚本的可用性提升。</p><p><img src="/../../img/blog/335025d13f92da375d850852241bab47_MD5.webp"></p><ul><li>强类型。我更偏爱强类型的语言，代码有更强的鲁棒性。</li><li>简洁、友好的输出。结合使用 nushell 的 table，可以很简单的输出优美的报告。</li></ul><h1 id="Powershell-美化"><a href="#Powershell-美化" class="headerlink" title="Powershell 美化"></a>Powershell 美化</h1><h2 id="安装-NF-字体"><a href="#安装-NF-字体" class="headerlink" title="安装 NF 字体"></a>安装 NF 字体</h2><p>后面介绍的一些功能会有显示一些特殊字符的需求，所以这里我们要提前安装一些支持特殊字符的字体。而 <a href="https://link.zhihu.com/?target=https://github.com/ryanoasis/nerd-fonts">nerd-fonts</a> 这个项目，包含了众多适配过特殊字符的字体，可以放心使用。这里推荐 <code>Meslo-Nerd-Fonts</code>，可以在 scoop 中安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scoop默认没有开启nerd-fonts分类，需要开启才能安装相关字体</span></span><br><span class="line">scoop bucket add nerd-fonts</span><br><span class="line"><span class="comment"># 安装字体时需要在管理员权限的终端中运行</span></span><br><span class="line">scoop install Meslo-NF-Mono</span><br></pre></td></tr></table></figure><h2 id="Windows-Terminal-终端-选项"><a href="#Windows-Terminal-终端-选项" class="headerlink" title="Windows Terminal (终端) 选项"></a>Windows Terminal (终端) 选项</h2><p>然后再来配置一下 Windows Terminal (终端) ，点击下拉菜单选择设置打开设置标签页，然后依次修改以下选项：</p><ul><li>启动 -&gt; 默认配置文件，改为 Powershell，如果你已经安装了 Powershell 7.2，这里应当可以自动搜索到。否则可能需要手动编辑配置文件。</li><li>启动 -&gt; 默认终端应用程序，改为 Windows Terminal (终端) 。</li><li>外观 -&gt; 在选项卡中显示亚力克效果，选择启用。</li><li>配色方案，这里可以根据自己喜好调整。</li><li>配置文件默认值 -&gt; 外观 -&gt; 字体，改为 <code>MesloLGS NF</code> 字体，字号按照自己屏幕大小选择，再开启亚力克效果，透明度选择 70% 左右。</li></ul><h2 id="对所有终端生效"><a href="#对所有终端生效" class="headerlink" title="对所有终端生效"></a>对所有终端生效</h2><p>在终端中配置只能在当前终端生效，为了让它能够在所有 Powershell 中永久生效，需要在配置文件中编辑。</p><p>在 Powershell 中运行以下命令，用 vscode 打开 Powershell 的配置文件，如果你没有 vscode，也可以改成 notepad 用记事本来编辑配置文件。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code $PROFILE</span><br></pre></td></tr></table></figure><h2 id="PSReadLine"><a href="#PSReadLine" class="headerlink" title="PSReadLine"></a>PSReadLine</h2><p>想让 Powershell 也拥有提示和补全功能？PSReadLine 可以帮你，这是一个可以增强终端体验的工具。</p><h3 id="安装-PSReadLine"><a href="#安装-PSReadLine" class="headerlink" title="安装 PSReadLine"></a>安装 PSReadLine</h3><p><a href="https://github.com/PowerShell/PSReadLine">PowerShell&#x2F;PSReadLine: A bash inspired readline implementation for PowerShell (github.com)</a><br>确保你使用的是 Powershell 7.2，然后运行下面的命令。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Install-Module PSReadLine -AllowPrerelease -Force</span><br><span class="line"># 或者你喜欢稳定版</span><br><span class="line">Install-Module PSReadLine -Scope CurrentUser</span><br></pre></td></tr></table></figure><h3 id="使用-PSReadLine"><a href="#使用-PSReadLine" class="headerlink" title="使用 PSReadLine"></a>使用 PSReadLine</h3><p>要使用 PSReadLine，同样需要在 <code>$PROFILE</code> 中添加一些配置，可以参考 <a href="https://link.zhihu.com/?target=https://docs.microsoft.com/zh-cn/powershell/module/psreadline/about/about_psreadline">官方文档</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Import-Module PSReadLine</span><br><span class="line"></span><br><span class="line">Set-PSReadLineOption -EditMode Emacs</span><br><span class="line">Set-PSReadLineOption -PredictionSource HistoryAndPlugin</span><br><span class="line">Set-PSReadLineOption -PredictionViewStyle ListView</span><br><span class="line">Set-PSReadLineOption -BellStyle None</span><br><span class="line">Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete</span><br></pre></td></tr></table></figure><h1 id="zsh-配置"><a href="#zsh-配置" class="headerlink" title="zsh 配置"></a>zsh 配置</h1><h2 id="Zsh-安装"><a href="#Zsh-安装" class="headerlink" title="Zsh 安装"></a>Zsh 安装</h2><ul><li>查看自己系统是否存在 zsh</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><ul><li>查看是否是使用的 zsh</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><ul><li>ubuntu</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"># ubuntu下载安装zsh</span><br><span class="line">apt install zsh -y</span><br><span class="line"># 切换</span><br><span class="line">chsh -s /bin/zsh</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>第一次进入 Zsh 会自动出现一个配置界面，这个界面可以根据需要自定义 Zsh。</p><p><img src="/../../img/blog/c773655c02f59e687eaea4359fb5a6ff_MD5.png"></p><p>在这里输入  <code>1</code>  就可以进入配置界面了。</p><p><img src="/../../img/blog/bc5c230efde8f4fd68396d10c8dfef9d_MD5.png"></p><p>配置界面中各个菜单代表的意思分别是：</p><ul><li><code>1</code>：设置命令历史记录相关的选项</li><li><code>2</code>：设置命令补全系统</li><li><code>3</code>：设置热建</li><li><code>4</code>：选择各种常见的选项，只需要选择 “On” 或者 “Off”</li><li><code>0</code>：退出，并使用空白（默认）配置</li><li><code>a</code>：终止设置并退出</li><li><code>q</code>：退出</li></ul><p>这里根据提示，然后按照你自己的喜好配置就可以了。配置好后，会在你的用户目录下生成  <code>.zshrc</code>  文件。然后我们要去这个文件中启用插件和主题。</p><h3 id="Ubuntu-安装插件"><a href="#Ubuntu-安装插件" class="headerlink" title="Ubuntu 安装插件"></a>Ubuntu 安装插件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zsh-autosuggestions zsh-syntax-highlighting eza</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestion</a><br> 基于历史记录，进行命令的推荐和补全。<br> <a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a><br> 对输入的命令提供高亮显示和语法检查。<br> <a href="https://github.com/eza-community/eza">eza-community&#x2F;eza: A modern alternative to ls</a><br> 用于替代原生的  <code>ls</code>，通过不同的颜色来更好地区分文件的类型及相关的元属性。</p></blockquote><h2 id="zsh-completions"><a href="#zsh-completions" class="headerlink" title="zsh-completions"></a>zsh-completions</h2><p><a href="https://github.com/zsh-users/zsh-completions/tree/master">https://github.com/zsh-users/zsh-completions/tree/master</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-completions.git ~/module/zsh-completions</span><br></pre></td></tr></table></figure><h2 id="Fzf-tab"><a href="#Fzf-tab" class="headerlink" title="Fzf-tab"></a>Fzf-tab</h2><p><a href="https://github.com/Aloxaf/fzf-tab">Aloxaf&#x2F;fzf-tab: Replace zsh’s default completion selection menu with fzf! (github.com)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install fzf</span><br><span class="line">git clone https://gitee.com/mirrors_Aloxaf/fzf-tab.git ~/module/fzf-tab</span><br></pre></td></tr></table></figure><h2 id="x2F-zshrc"><a href="#x2F-zshrc" class="headerlink" title="~&#x2F;. zshrc"></a>~&#x2F;. zshrc</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br><span class="line">source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br><span class="line">source ~/module/fzf-tab/fzf-tab.plugin.zsh</span><br><span class="line">source ~/module/zsh-completions/zsh-completions.plugin.zsh</span><br><span class="line">alias ls=&quot;eza&quot;</span><br></pre></td></tr></table></figure><h1 id="命令行常用工具"><a href="#命令行常用工具" class="headerlink" title="命令行常用工具"></a>命令行常用工具</h1><h2 id="替代品"><a href="#替代品" class="headerlink" title="替代品"></a>替代品</h2><ul><li><a href="https://www.ruanyifeng.com/blog/2022/01/cli-alternative-tools.html">命令行常用工具的替代品 - 阮一峰的网络日志 (ruanyifeng.com)</a></li><li><a href="https://github.com/ibraheemdev/modern-unix">ibraheemdev&#x2F;modern-unix: A collection of modern&#x2F;faster&#x2F;saner alternatives to common unix commands. (github.com)</a></li></ul><h2 id="Zoxide-快速跳转"><a href="#Zoxide-快速跳转" class="headerlink" title="Zoxide 快速跳转"></a>Zoxide 快速跳转</h2><p><a href="https://github.com/ajeetdsouza/zoxide">ajeetdsouza&#x2F;zoxide: A smarter cd command. Supports all major shells. (github.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置</title>
      <link href="/posts/%E6%9C%AC%E5%9C%B0/Hexo%E9%85%8D%E7%BD%AE.html"/>
      <url>/posts/%E6%9C%AC%E5%9C%B0/Hexo%E9%85%8D%E7%BD%AE.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-安装配置"><a href="#Hexo-安装配置" class="headerlink" title="Hexo 安装配置"></a>Hexo 安装配置</h1><h2 id="Node-Js-安装设置"><a href="#Node-Js-安装设置" class="headerlink" title="Node.Js 安装设置"></a>Node.Js 安装设置</h2><p>安装完成后，要查看我们是否安装成功，可以打开命令提示符（<code>Win + R</code>），输入 <code>cmd</code> 打开控制台，输入如下命令，如果出现对应版本号，说明安装成功了；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h2><p>在你的硬盘上找个地儿，用来存放你的博客文件，比如我的就在 <code>D:personalFiles/github/blog</code>，这个文件夹你可以根据自己的喜好来设置。然后从命令台进入当前文件夹，接下来就是安装过程了；</p><p>首先安装 Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br></pre></td></tr></table></figure><p>新建一个文件夹用于存放你的博客，比如我的是 <code>blog</code>，然后进入该文件夹，并用如下命令进行初始化并安装必备组件；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init .</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后输入如下命令，然后在浏览器中打开 <code>http://localhost:4000</code>；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建博客</span></span><br><span class="line">hexo new &quot;博客名&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开本地服务器</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h1 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h1><p><a href="https://blog.17lai.site/posts/5311b619/#%E5%90%84%E7%A7%8D%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F">基于Hexo的matery主题搭建博客增强部署篇4 | 夜法之书 (17lai.site)</a></p><h2 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p><ul><li>Repository name 中输入 <code>用户名.github.io</code>(<font color="#00b050">最好均为小写字母</font>)</li><li>勾选 “Initialize this repository with a README”</li><li>Description 选填</li></ul><p>填好后点击 Create repository 创建。创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。首先<strong>安装 hexo-deployer-git</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后修改 <code>_config.yml</code> 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:用户名/用户名.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p><p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p><h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><ul><li><a href="https://blog.csdn.net/kuizuo12/article/details/124716488">Vercel部署个人博客_愧怍12的博客-CSDN博客</a></li><li><a href="https://juejin.cn/post/7281257305176588343">Vercel部署高级用法教程 - 掘金 (juejin.cn)</a></li><li>但 vercel 似乎无法正确解析带有 + 的 url, 且 Vercel 的 CNAME 值有 CAA 记录，这个 CAA 记录限制了证书颁发机构</li><li><a href="https://zhuanlan.zhihu.com/p/55252024">手把手教你使用Netlify部署博客及部署自动化 - 知乎 (zhihu.com)</a><br>然后在域名提供商那里添加 CNAME 记录如下<br><img src="/../../../img/blog/butterfly%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE-1.png"><br>可用该网站来检测速度 <a href="https://boce.aliyun.com/detect/ping">阿里云网站运维检测平台 (aliyun.com)</a><br>如果该域名本身没有 SSL 证书，但是你将其 CNAME 记录跳转到另一个有 SSL 证书且已经部署的域名，是可以实现 HTTPS 访问的。</li></ul><h1 id="Hexo-Obsidian-内部链接跳转"><a href="#Hexo-Obsidian-内部链接跳转" class="headerlink" title="Hexo+Obsidian 内部链接跳转"></a>Hexo+Obsidian 内部链接跳转</h1><ul><li>Obsidian 选择基于当前笔记的相对路径，关闭 WIKi 链接</li><li>Hexo 需要修改永久链接模式 <a href="https://hexo.io/zh-cn/docs/permalinks.html">永久链接（Permalinks）| Hexo</a>，修改 <code>_config.yml</code> 中的</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:category/:post_title.html</span></span><br></pre></td></tr></table></figure><ul><li>不同级目录下的跳转</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[深度学习-图像视频文本标注工具](../../工具使用/深度学习-图像视频文本标注工具)</span><br></pre></td></tr></table></figure><p>需要去掉. md 后缀，采用以下 python 脚本自动全部去除, 脚本放在根目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要查找的文件夹路径和要替换的链接格式</span></span><br><span class="line">folder_path = <span class="string">r&quot;.\source\_posts/&quot;</span></span><br><span class="line">link_pattern = <span class="string">r&quot;\[(.*?)\]\((.*?).md\)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件夹中的所有Markdown文件</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(folder_path):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.endswith(<span class="string">&quot;.md&quot;</span>):</span><br><span class="line">            file_path = os.path.join(root, file)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                content = f.read()</span><br><span class="line">            <span class="comment"># 使用正则表达式查找并替换链接</span></span><br><span class="line">            new_content = re.sub(link_pattern, <span class="string">r&quot;[\1](\2)&quot;</span>, content)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(new_content)</span><br></pre></td></tr></table></figure><p>借鉴 <a href="./Hexo%E6%8F%92%E4%BB%B6">Hexo插件</a> 中的钩子函数实现提交时自动更新</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">hexo generate &amp;&amp; python changemd.py &amp;&amp; git add .</span><br></pre></td></tr></table></figure><h1 id="hexo-插件"><a href="#hexo-插件" class="headerlink" title="hexo 插件"></a>hexo 插件</h1><h2 id="Hexo-auto-category-自动生成-Categories"><a href="#Hexo-auto-category-自动生成-Categories" class="headerlink" title="Hexo -auto-category 自动生成 Categories"></a>Hexo -auto-category 自动生成 Categories</h2><p>最常用的文件管理策略，就是利用文件系统目录结构 (树形结构 directory-tree)。<br>同样，为了便于管理大量的日志文件，采用目录结构是一种简便可行的方案。<code>hexo-auto-category</code> 根据日志文件 (Markdown) 所在文件目录自动分类，即自动生成 <code>markdown</code> 的 front-matter 中的 <code>categories</code> 变量。</p><p><strong>示例</strong></p><p>对于博客 <code>source/_post/web/framework/hexo.md</code>，该插件会自动生成以下 <code>categories</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:  </span><br><span class="line">  - web  </span><br><span class="line">  - framework  </span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-auto-category --save</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在站点根目录下的 <code>_config.yml</code> 添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_category:  </span><br><span class="line"> enable: true  </span><br><span class="line"> depth:  </span><br></pre></td></tr></table></figure><h3 id="编译-amp-部署"><a href="#编译-amp-部署" class="headerlink" title="编译 &amp; 部署"></a>编译 &amp; 部署</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d  </span><br></pre></td></tr></table></figure><h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><p>如果只想生成第一级目录分类，可以设置 <code>depth</code> 属性，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_category:  </span><br><span class="line"> enable: true  </span><br><span class="line"> depth: 1</span><br></pre></td></tr></table></figure><h3 id="利用-Git-钩子函数触发更新"><a href="#利用-Git-钩子函数触发更新" class="headerlink" title="利用 Git 钩子函数触发更新"></a>利用 Git 钩子函数触发更新</h3><p>这个插件只有执行 <code>hexo generate</code> 时才会去读取文件夹并更新所有文章的 Front-matter 分类信息，所以我们可以利用 <a href="https://link.zhihu.com/?target=https://git-scm.com/book/zh/v2/%25E8%2587%25AA%25E5%25AE%259A%25E4%25B9%2589-Git-Git-%25E9%2592%25A9%25E5%25AD%2590%23_git_hooks">Git的钩子函数</a>，在 commit (提交) 的时候先执行下 <code>hexo generate</code>，这样就能实现自动更新了。</p><p>在 <code>.git/hooks</code> 目录下新建一个 <code>pre-commit</code> 文件</p><p><img src="/../../../img/blog/556caf664a0dcbfcadc114240db84416_MD5.webp"></p><p>可以先在该文件中写入 <code>echo hello world!</code>，然后在 git 终端下执行 <code>sh pre-commit</code> 或者 <code>./pre-commit</code> 测试钩子能不能正常执行，没问题后，将如下命令写到文件里：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">hexo generate &amp;&amp; git add .</span><br></pre></td></tr></table></figure><p> 之所以后面追加 <code>git add .</code>，是因为 generate (生成) 后，所有文章的 Front-matter 信息会更新，所以要将所有修改重新添加进来</p><h2 id="Hexo-neat-插件优化提升访问效率"><a href="#Hexo-neat-插件优化提升访问效率" class="headerlink" title="Hexo-neat 插件优化提升访问效率"></a>Hexo-neat 插件优化提升访问效率</h2><p><a href="https://cloud.tencent.com/developer/article/1946999">Hexo-neat插件优化提升访问效率-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><h3 id="1、安装-Hexo-neat"><a href="#1、安装-Hexo-neat" class="headerlink" title="1、安装 Hexo-neat"></a>1、安装 Hexo-neat</h3><p>在站点根目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><h3 id="2、添加相关配置"><a href="#2、添加相关配置" class="headerlink" title="2、添加相关配置"></a>2、添加相关配置</h3><p>在站点配置文件 <code>_config.yml</code> 添加相关配置，直接添加到站点配置文件 <code>_config.yml</code> 的末尾就可以。可以安装自己的需求去自定义配置，不过有些注意事项</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="comment"># 博文压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 压缩html（ejs，swig等也属于html格式片段）</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line"><span class="comment"># 压缩css  </span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/live2d-widget/waifu.css&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;jquery.fancybox.min.css&#x27;</span></span><br><span class="line"><span class="comment"># 压缩js</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span> <span class="comment">#打印日志</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;jquery.fancybox.min.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/index.js&#x27;</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/live2d-widget/*.js&#x27;</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/live2d-widget/*.min.js&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3、hexo-neat-插件注意事项"><a href="#3、hexo-neat-插件注意事项" class="headerlink" title="3、hexo-neat 插件注意事项"></a>3、hexo-neat 插件注意事项</h3><p>在使用 hexo-neat 插件时，可以在命令窗口中看到各个文件的压缩率，于是可以通过跳过一些文件让效率更高。<br><strong>1. 跳过压缩文件的正确配置方式</strong><br>如果按照官方插件的文档说明来配置 exclude，会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。于是需要给这些文件指定正确的路径，万能的配置方式如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>已经压缩过的 css 和 js 不用压缩：剔除 exclude（<code>*.min.css</code> 和 <code>* .min.js</code>）</li><li>特殊名字 xx. xx. min. js 的需要单独列出来（这里引用了 fancybox 图片弹窗效果，从压缩名单里单独剔除）</li><li>深目录的，需要单独列出来：（这里我引用了 live 2 d 看板娘的动画） 单用 <code>_*/_.min.js</code> 深目录跳过已压缩文件不行，这部分只好全部跳过压缩了</li></ul><p><strong>2. 压缩 html 时不要跳过 <code>.md</code> 文件和 <code>.swig</code> 文件</strong><br><code>.md</code> 文件就是 markdown 文件，如果跳过压缩 <code>.md</code> 文件，而又刚好在文章中使用到了 tab 标签，那么当 hexo 在生成静态页面时就会发生解析错误。这会导致使用到了 tab 标签的页面生成失败而无法访问。</p><p><code>.swig</code> 文件是模板引擎文件，也就是 hexo 可以通过这些文件来生成对应的页面。如果跳过这些文件，所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。<br><strong>3. 注意 md 中不要带特殊标签&lt;&gt;的颜表情&lt;(￣ˇ￣)&#x2F;、&lt;(ˉ^ˉ)&gt;等，因为压缩转换为 html 后会变成<br>&lt; (￣ˇ￣)&#x2F;，转义失败！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 本地 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
